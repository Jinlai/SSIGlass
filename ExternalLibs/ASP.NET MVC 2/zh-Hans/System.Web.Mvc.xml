<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Mvc</name>
  </assembly>
  <members>
    <member name="T:System.Web.Mvc.AcceptVerbsAttribute">
      <summary>表示一个特性，该特性指定操作方法将响应的 HTTP 谓词。</summary>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>使用操作方法将响应的 HTTP 谓词的列表来初始化 <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> 类的新实例。</summary>
      <param name="verbs">操作方法将响应的 HTTP 谓词。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="verbs" /> 参数为 null 或零长度。</exception>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.Web.Mvc.HttpVerbs)">
      <summary>使用操作方法将响应的 HTTP 谓词来初始化 <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> 类的新实例。</summary>
      <param name="verbs">操作方法将响应的 HTTP 谓词。</param>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定指定的方法信息对指定的控制器上下文是否有效。</summary>
      <returns>如果方法信息有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="methodInfo">方法信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext " /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.AcceptVerbsAttribute.Verbs">
      <summary>获取或设置操作方法将响应的 HTTP 谓词的列表。</summary>
      <returns>操作方法将响应的 HTTP 谓词的列表。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionDescriptor">
      <summary>提供有关操作方法的信息，如操作方法的名称、控制器、参数、特性和筛选器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ActionName">
      <summary>获取操作方法的名称。</summary>
      <returns>操作方法的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor">
      <summary>获取控制器描述符。</summary>
      <returns>控制器描述符。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的参数和控制器上下文来执行操作方法。</summary>
      <returns>执行操作方法的结果。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameters">操作方法的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组（按类型标识）。</summary>
      <returns>一个自定义特性数组；如果不存在指定类型的自定义特性，则为一个空数组。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attritubeType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilters">
      <summary>返回与此操作方法关联的筛选器。</summary>
      <returns>与此操作方法关联的筛选器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetParameters">
      <summary>返回操作方法的参数。</summary>
      <returns>操作方法的参数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetSelectors">
      <summary>返回操作-方法选择器。</summary>
      <returns>操作-方法选择器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>确定是否为此成员定义指定特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义 <paramref name="attributeType" />，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attritubeType" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutedContext">
      <summary>提供 <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 ActionExecuted 方法的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionExecutedContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Boolean,System.Exception)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionExecutedContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作方法描述符。</param>
      <param name="canceled">如果操作被取消，则为 true。</param>
      <param name="exception">异常对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionDescriptor" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ActionDescriptor">
      <summary>获取或设置操作描述符。</summary>
      <returns>操作描述符。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Canceled">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Web.Mvc.ActionExecutedContext" /> 对象已被取消。</summary>
      <returns>如果已取消上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Exception">
      <summary>获取或设置在操作方法的执行过程中发生的异常（如果有）。</summary>
      <returns>在操作方法的执行过程中发生的异常（如果有）。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ExceptionHandled">
      <summary>获取或设置一个值，该值指示是否处理异常。</summary>
      <returns>如果异常得到了处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Result">
      <summary>获取或设置由操作方法返回的结果。</summary>
      <returns>由操作方法返回的结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutingContext">
      <summary>提供 <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 ActionExecuting 方法的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionExecutingContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的控制器上下文、操作描述符和操作-方法参数来初始化 <see cref="T:System.Web.Mvc.ActionExecutingContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="actionParameters">操作-方法参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ActionParameters" /> 或 <paramref name="actionDescriptor" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionDescriptor">
      <summary>获取或设置操作描述符。</summary>
      <returns>操作描述符。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionParameters">
      <summary>获取或设置操作-方法参数。</summary>
      <returns>操作-方法参数。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.Result">
      <summary>获取或设置由操作方法返回的结果。</summary>
      <returns>由操作方法返回的结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionFilterAttribute">
      <summary>表示所有操作-筛选器特性的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>在执行操作方法后由 MVC 框架调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>在执行操作方法之前由 MVC 框架调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>在执行操作结果后由 MVC 框架调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>在执行操作结果之前由 MVC 框架调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionMethodSelectorAttribute">
      <summary>表示一个特性，该特性用于影响操作方法的选择。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionMethodSelectorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定操作方法选择对指定的控制器上下文是否有效。</summary>
      <returns>如果操作方法选择对指定的控制器上下文有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="methodInfo">有关操作方法的信息。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionNameAttribute">
      <summary>表示一个用于操作的名称的特性。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionNameAttribute" /> 类的新实例。</summary>
      <param name="name">操作的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>确定操作名称在指定的控制器上下文中是否有效。</summary>
      <returns>如果操作名称在指定的控制器上下文中有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
      <param name="methodInfo">有关操作方法的信息。</param>
    </member>
    <member name="P:System.Web.Mvc.ActionNameAttribute.Name">
      <summary>获取或设置操作的名称。</summary>
      <returns>操作的名称。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionNameSelectorAttribute">
      <summary>表示一个特性，该特性可影响操作方法的选择。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionNameSelectorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>确定操作名称在指定的控制器上下文中是否有效。</summary>
      <returns>如果操作名称在指定的控制器上下文中有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
      <param name="methodInfo">有关操作方法的信息。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionResult">
      <summary>封装一个操作方法的结果并用于代表该操作方法执行框架级操作。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ActionResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">用于执行结果的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionSelector">
      <summary>表示一个委托，该委托包含用于选择操作方法的逻辑。</summary>
      <returns>如果成功选择了操作方法，则为 true；否则为 false。</returns>
      <param name="controllerContext">当前的 HTTP 请求上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper">
      <summary>表示支持在视图中呈现 AJAX 方案中的 HTML。</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>使用指定的视图上下文和视图数据容器来初始化 <see cref="T:System.Web.Mvc.AjaxHelper" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>使用指定的视图上下文、视图数据容器和路由集合来初始化 <see cref="T:System.Web.Mvc.AjaxHelper" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <param name="routeCollection">URL 路由集合。</param>
      <exception cref="T:System.ArgumentNullException">其中一个或多个参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.GlobalizationScriptPath">
      <summary>获取或设置用于存储全球化脚本文件的位置的根路径。</summary>
      <returns>存储全球化脚本文件的文件夹的位置。默认位置是“~/Scripts/Globalization”。</returns>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.JavaScriptStringEncode(System.String)">
      <summary>序列化指定的消息并返回生成的 JSON 格式字符串。</summary>
      <returns>序列化为 JSON 格式字符串的消息。</returns>
      <param name="message">要序列化的消息。</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.RouteCollection">
      <summary>获取应用程序的 URL 路由的集合。</summary>
      <returns>应用程序的路由的集合。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewContext">
      <summary>获取有关视图的上下文信息。</summary>
      <returns>视图的上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewData">
      <summary>获取当前的视图数据字典。</summary>
      <returns>视图数据字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewDataContainer">
      <summary>获取视图数据容器。</summary>
      <returns>视图数据容器。</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper`1">
      <summary>表示支持在强类型视图中呈现 AJAX 方案中的 HTML。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>使用指定的视图上下文和视图数据容器来初始化 <see cref="T:System.Web.Mvc.AjaxHelper`1" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>使用指定的视图上下文、视图数据容器和 URL 路由集合来初始化 <see cref="T:System.Web.Mvc.AjaxHelper`1" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <param name="routeCollection">URL 路由集合。</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewData">
      <summary>获取视图数据字典的强类型版本。</summary>
      <returns>视图的强类型数据字典。</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxRequestExtensions">
      <summary>表示一个类，该类对 <see cref="T:System.Web.HttpRequestBase" /> 类进行了扩展，在其中添加了确定 HTTP 请求是否为 AJAX 请求的功能。</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)">
      <summary>确定指定的 HTTP 请求是否为 AJAX 请求。</summary>
      <returns>如果指定的 HTTP 请求是 AJAX 请求，则为 true，否则为 false。</returns>
      <param name="request">HTTP 请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistration">
      <summary>提供在 ASP.NET MVC 应用程序内注册一个或多个区域的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.AreaRegistration" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistration.AreaName">
      <summary>获取要注册的区域的名称。</summary>
      <returns>要注册的区域的名称。</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas">
      <summary>注册 ASP.NET MVC 应用程序中的所有区域。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas(System.Object)">
      <summary>使用指定的用户定义状态信息在 ASP.NET MVC 应用程序内注册所有区域。</summary>
      <param name="state">一个包含要传递到区域中的用户定义信息的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
      <summary>使用指定区域的上下文信息在 ASP.NET MVC 应用程序内注册某个区域。</summary>
      <param name="context">对注册区域所需的信息进行封装。</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistrationContext">
      <summary>对在 ASP.NET MVC 应用程序内注册某个区域时所需的信息进行封装。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection)">
      <summary>使用指定的区域名称和路由集合来初始化 <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> 类的新实例。</summary>
      <param name="areaName">要注册的区域的名称。</param>
      <param name="routes">应用程序的路由的集合。</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection,System.Object)">
      <summary>使用指定的区域名称、路由集合和用户定义的数据来初始化 <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> 类的新实例。</summary>
      <param name="areaName">要注册的区域的名称。</param>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="state">一个包含要传递到区域中的用户定义信息的对象。</param>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.AreaName">
      <summary>获取要注册的区域的名称。</summary>
      <returns>要注册的区域的名称。</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String)">
      <summary>映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object)">
      <summary>使用指定的路由默认值，映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object)">
      <summary>使用指定的路由默认值和约束，映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="constraints">一组用于指定 URL 参数的有效值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>使用指定的路由默认值、约束和命名空间，映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="constraints">一组用于指定 URL 参数的有效值的表达式。</param>
      <param name="namespaces">应用程序的一组可枚举的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.String[])">
      <summary>使用指定的路由默认值和命名空间，映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="namespaces">应用程序的一组可枚举的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.String[])">
      <summary>使用指定的命名空间映射指定的 URL 路由并将其与 <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> 属性指定的区域关联。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="name">路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="namespaces">应用程序的一组可枚举的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Namespaces">
      <summary>获取应用程序的命名空间。</summary>
      <returns>应用程序的一组可枚举的命名空间。</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Routes">
      <summary>获取应用程序的已定义路由的集合。</summary>
      <returns>应用程序的已定义路由的集合。</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.State">
      <summary>获取一个对象，该对象包含要传递到区域中的用户定义信息。</summary>
      <returns>一个包含要传递到区域中的用户定义信息的对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.AssociatedMetadataProvider">
      <summary>提供用于实现元数据提供程序的抽象类。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> 类。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>在派生类中重写时，创建属性的模型元数据。</summary>
      <returns>属性的模型元数据。</returns>
      <param name="attributes">特性集。</param>
      <param name="containerType">容器的类型。</param>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.FilterAttributes(System.Type,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>获取特性的列表。</summary>
      <returns>特性列表。</returns>
      <param name="containerType">容器的类型。</param>
      <param name="propertyDescriptor">属性说明符。</param>
      <param name="attributes">特性容器。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>返回模型的属性列表。</summary>
      <returns>模型的属性列表。</returns>
      <param name="container">模型容器。</param>
      <param name="containerType">容器的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>使用容器类型和属性说明符返回指定属性的元数据。</summary>
      <returns>指定属性的元数据。</returns>
      <param name="modelAccessor">模型访问器。</param>
      <param name="containerType">容器的类型。</param>
      <param name="propertyDescriptor">属性说明符。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>使用容器类型和属性名称返回指定属性的元数据。</summary>
      <returns>指定属性的元数据。</returns>
      <param name="modelAccessor">模型访问器。</param>
      <param name="containerType">容器的类型。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>使用模型类型返回指定属性的元数据。</summary>
      <returns>指定属性的元数据。</returns>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">容器的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetTypeDescriptor(System.Type)">
      <summary>返回指定类型的类型说明符。</summary>
      <returns>类型说明符。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="T:System.Web.Mvc.AssociatedValidatorProvider">
      <summary>为用于实现验证提供程序的类提供抽象类。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> 类。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>获取指定类型的类型说明符。</summary>
      <returns>指定类型的类型说明符。</returns>
      <param name="type">验证提供程序的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>使用元数据和控制器上下文来获取模型的验证程序。</summary>
      <returns>模型的验证程序。</returns>
      <param name="metadata">元数据。</param>
      <param name="context">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>使用元数据、控制器上下文和特性列表获取模型的验证程序。</summary>
      <returns>模型的验证程序。</returns>
      <param name="metadata">元数据。</param>
      <param name="context">控制器上下文。</param>
      <param name="attributes">特性列表。</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncController">
      <summary>为异步控制器提供基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.AsyncController" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.AsyncController.AsyncManager">
      <summary>获取异步管理器实例。</summary>
      <returns>异步管理器实例。</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以初始化异步请求处理。</summary>
      <returns>异步操作的状态。</returns>
      <param name="requestContext">请求上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">状态对象。</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecuteCore(System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 在初始化异步请求处理期间调用。</summary>
      <returns>异步操作的状态。</returns>
      <param name="callback">异步回调方法。</param>
      <param name="state">状态对象。</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.CreateActionInvoker">
      <summary>创建操作调用程序。</summary>
      <returns>操作调用程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecute(System.IAsyncResult)">
      <summary>取消异步操作方法的执行。</summary>
      <param name="asyncResult">异步结果的状态。</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecuteCore(System.IAsyncResult)">
      <summary>在当前异步操作完成时由 ASP.NET 调用。</summary>
      <param name="asyncResult">异步结果的状态。</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以开始执行异步操作方法。</summary>
      <returns>异步操作的状态。</returns>
      <param name="requestContext">请求上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#EndExecute(System.IAsyncResult)">
      <summary>由 ASP.NET 在异步操作方法执行结束时取消异步操作方法的执行。</summary>
      <param name="asyncResult">异步结果的状态。</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncTimeoutAttribute">
      <summary>表示一个特性，该特性用于设置异步方法的超时值（以秒为单位）。</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> 类的新实例。</summary>
      <param name="duration">超时值（以毫秒为单位）。</param>
    </member>
    <member name="P:System.Web.Mvc.AsyncTimeoutAttribute.Duration">
      <summary>获取超时持续时间。</summary>
      <returns>超时持续时间。</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>在执行异步操作方法之前由 ASP.NET 调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.AuthorizationContext">
      <summary>对使用 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 特性时所需的信息进行封装。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.AuthorizationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>使用指定的控制器上下文来初始化 <see cref="T:System.Web.Mvc.AuthorizationContext" /> 类的新实例。</summary>
      <param name="controllerContext">执行结果时所处的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>使用指定的控制器上下文和操作描述符来初始化 <see cref="T:System.Web.Mvc.AuthorizationContext" /> 类的新实例。</summary>
      <param name="controllerContext">用于执行结果的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="actionDescriptor">一个提供有关操作方法的信息（如操作方法的名称、控制器、参数、特性和筛选器）的对象。</param>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.ActionDescriptor">
      <summary>提供 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 特性标记的操作方法的相关信息，如操作方法的名称、控制器、参数、特性和筛选器。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 特性标记的操作方法的操作描述符。</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.Result">
      <summary>获取或设置由操作方法返回的结果。</summary>
      <returns>由操作方法返回的结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.AuthorizeAttribute">
      <summary>表示一个特性，该特性用于限制调用方对操作方法的访问。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
      <summary>确定是否获得访问核心框架的授权。</summary>
      <returns>如果获得访问授权，则为 true；否则为 false。</returns>
      <param name="httpContext">HTTP 上下文，它封装有关单个 HTTP 请求的所有 HTTP 特定的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>处理授权失败的 HTTP 请求。</summary>
      <param name="filterContext">封装用于 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 的信息。<paramref name="filterContext" /> 对象包括控制器、HTTP 上下文、请求上下文、操作结果和路由数据。</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在过程请求授权时调用。</summary>
      <param name="filterContext">筛选器上下文，它封装用于 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnCacheAuthorization(System.Web.HttpContextBase)">
      <summary>在缓存模块请求授权时调用。</summary>
      <returns>对验证状态的引用。</returns>
      <param name="httpContext">HTTP 上下文，它封装有关单个 HTTP 请求的所有 HTTP 特定的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Roles">
      <summary>获取或设置用户角色。</summary>
      <returns>用户角色。</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Users">
      <summary>获取或设置授权用户。</summary>
      <returns>授权用户。</returns>
    </member>
    <member name="T:System.Web.Mvc.BindAttribute">
      <summary>表示一个特性，该特性用于提供有关如何将模型绑定到参数的详细信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.BindAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Exclude">
      <summary>获取或设置不允许绑定的属性名称的列表（各属性名称之间用逗号分隔）。</summary>
      <returns>排除列表。</returns>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Include">
      <summary>获取或设置允许绑定的属性名称的列表（各属性名称之间用逗号分隔）。</summary>
      <returns>包含列表。</returns>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.IsPropertyAllowed(System.String)">
      <summary>确定是否允许使用指定属性。</summary>
      <returns>如果允许使用指定属性，则为 true；否则为 false。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Prefix">
      <summary>获取或设置在呈现表示绑定到操作参数或模型属性的标记时要使用的前缀。</summary>
      <returns>要使用的前缀。</returns>
    </member>
    <member name="T:System.Web.Mvc.ByteArrayModelBinder">
      <summary>将浏览器请求映射到字节数组。</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ByteArrayModelBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>使用指定的控制器上下文和绑定上下文来绑定模型。</summary>
      <returns>绑定的数据对象。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ChildActionOnlyAttribute">
      <summary>表示一个特性，该特性用于指示操作方法只应作为子操作进行调用。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ChildActionOnlyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在需要授权时调用。</summary>
      <param name="filterContext">一个对象，该对象封装向子操作授予访问权限所需的信息。</param>
    </member>
    <member name="T:System.Web.Mvc.ContentResult">
      <summary>表示一个用户定义的内容类型，该类型是操作方法的结果。</summary>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ContentResult" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.Content">
      <summary>获取或设置内容。</summary>
      <returns>内容。</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentEncoding">
      <summary>获取或设置内容编码。</summary>
      <returns>内容编码。</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentType">
      <summary>获取或设置内容的类型。</summary>
      <returns>内容的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.Controller">
      <summary>提供用于响应对 ASP.NET MVC 网站所进行的 HTTP 请求的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Controller" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.ActionInvoker">
      <summary>获取控制器的操作调用程序。</summary>
      <returns>操作调用程序。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Binders">
      <summary>获取或设置联编程序。</summary>
      <returns>联编程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String)">
      <summary>使用字符串创建一个内容结果对象。</summary>
      <returns>内容结果实例。</returns>
      <param name="content">要写入到响应的内容。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String)">
      <summary>使用字符串和内容类型创建一个内容结果对象。</summary>
      <returns>内容结果实例。</returns>
      <param name="content">要写入到响应的内容。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
      <summary>使用字符串、内容类型和内容编码创建一个内容结果对象。</summary>
      <returns>内容结果实例。</returns>
      <param name="content">要写入到响应的内容。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="contentEncoding">内容编码。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateActionInvoker">
      <summary>创建操作调用程序。</summary>
      <returns>操作调用程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateTempDataProvider">
      <summary>创建临时数据提供程序。</summary>
      <returns>临时数据提供程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose">
      <summary>释放 <see cref="T:System.Web.Mvc.Controller" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose(System.Boolean)">
      <summary>释放非托管资源和托管资源（后者为可选项）。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ExecuteCore">
      <summary>调用当前控制器上下文中的操作。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String)">
      <summary>使用文件内容和文件类型创建一个 <see cref="T:System.Web.Mvc.FileContentResult" /> 对象。</summary>
      <returns>文件内容结果对象。</returns>
      <param name="fileContents">要发送到响应的二进制内容。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String,System.String)">
      <summary>使用文件内容、内容类型和目标文件名创建一个 <see cref="T:System.Web.Mvc.FileContentResult" /> 对象。</summary>
      <returns>文件内容结果对象。</returns>
      <param name="fileContents">要发送到响应的二进制内容。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="fileDownloadName">要在浏览器中显示的文件下载对话框中使用的文件名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String)">
      <summary>使用 <see cref="T:System.IO.Stream" /> 对象和内容类型创建一个 <see cref="T:System.Web.Mvc.FileStreamResult" /> 对象。</summary>
      <returns>文件内容结果对象。</returns>
      <param name="fileStream">要发送到响应的流。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
      <summary>使用 <see cref="T:System.IO.Stream" /> 对象、内容类型和目标文件名创建一个 <see cref="T:System.Web.Mvc.FileStreamResult" /> 对象。</summary>
      <returns>文件流结果对象。</returns>
      <param name="fileStream">要发送到响应的流。</param>
      <param name="contentType">内容类型（MIME 类型）</param>
      <param name="fileDownloadName">要在浏览器中显示的文件下载对话框中使用的文件名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String)">
      <summary>使用文件名和内容类型创建一个 <see cref="T:System.Web.Mvc.FilePathResult" /> 对象。</summary>
      <returns>文件流结果对象。</returns>
      <param name="fileName">要发送到响应的文件的路径。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String,System.String)">
      <summary>使用文件名、内容类型和文件下载名创建一个 <see cref="T:System.Web.Mvc.FilePathResult" /> 对象。</summary>
      <returns>文件流结果对象。</returns>
      <param name="fileName">要发送到响应的文件的路径。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="fileDownloadName">要在浏览器中显示的文件下载对话框中使用的文件名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.HandleUnknownAction(System.String)">
      <summary>当请求与此控制器匹配时调用，但在此控制器中找不到任何具有指定操作名称的方法。</summary>
      <param name="actionName">尝试的操作的名称。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.HttpContext">
      <summary>获取有关单个 HTTP 请求的 HTTP 特定的信息。</summary>
      <returns>HTTP 上下文。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Initialize(System.Web.Routing.RequestContext)">
      <summary>初始化调用构造函数后可能不可用的数据。</summary>
      <param name="requestContext">HTTP 上下文和路由数据。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.JavaScript(System.String)">
      <summary>创建一个 <see cref="T:System.Web.Mvc.JavaScriptResult" /> 对象。</summary>
      <returns>将脚本写入到响应的 <see cref="T:System.Web.Mvc.JavaScriptResult" /> 对象。</returns>
      <param name="script">要在客户端上运行的 JavaScript 代码</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object)">
      <summary>创建一个将指定对象序列化为 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Web.Mvc.JsonResult" /> 对象。</summary>
      <returns>将指定对象序列化为 JSON 格式的 JSON 结果对象。执行由此方法准备的结果对象时，该对象由 MVC 框架写入到响应中。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String)">
      <summary>创建一个将指定对象序列化为 JavaScript 对象表示法 (JSON) 格式的 <see cref="T:System.Web.Mvc.JsonResult" /> 对象。</summary>
      <returns>将指定对象序列化为 JSON 格式的 JSON 结果对象。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding)">
      <summary>创建一个将指定对象序列化为 JavaScript 对象表示法 (JSON) 格式的 <see cref="T:System.Web.Mvc.JsonResult" /> 对象。</summary>
      <returns>将指定对象序列化为 JSON 格式的 JSON 结果对象。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="contentEncoding">内容编码。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
      <summary>创建 <see cref="T:System.Web.Mvc.JsonResult" /> 对象，该对象使用内容类型、内容编码和 JSON 请求行为将指定对象序列化为 JavaScript 对象表示法 (JSON) 格式。</summary>
      <returns>将指定对象序列化为 JSON 格式的结果对象。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="contentEncoding">内容编码。</param>
      <param name="behavior">JSON 请求行为</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Web.Mvc.JsonRequestBehavior)">
      <summary>创建 <see cref="T:System.Web.Mvc.JsonResult" /> 对象，该对象使用指定内容类型和 JSON 请求行为将指定对象序列化为 JavaScript 对象表示法 (JSON) 格式。</summary>
      <returns>将指定对象序列化为 JSON 格式的结果对象。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
      <param name="contentType">内容类型（MIME 类型）。</param>
      <param name="behavior">JSON 请求行为</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.Web.Mvc.JsonRequestBehavior)">
      <summary>创建 <see cref="T:System.Web.Mvc.JsonResult" /> 对象，该对象使用指定 JSON 请求行为将指定对象序列化为 JavaScript 对象表示法 (JSON) 格式。</summary>
      <returns>将指定对象序列化为 JSON 格式的结果对象。</returns>
      <param name="data">要序列化的 JavaScript 对象图。</param>
      <param name="behavior">内容类型（MIME 类型）。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ModelState">
      <summary>获取包含模型状态和模型绑定验证状态的模型状态字典对象。</summary>
      <returns>模型状态字典。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>在调用操作方法后调用。</summary>
      <param name="filterContext">有关当前请求和操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>在调用操作方法前调用。</summary>
      <param name="filterContext">有关当前请求和操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在进行授权时调用。</summary>
      <param name="filterContext">有关当前请求和操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>当操作中发生未经处理的异常时调用。</summary>
      <param name="filterContext">有关当前请求和操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>在执行由操作方法返回的操作结果后调用。</summary>
      <param name="filterContext">有关当前请求和操作结果的信息</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>在执行由操作方法返回的操作结果前调用。</summary>
      <param name="filterContext">有关当前请求和操作结果的信息</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView">
      <summary>创建一个呈现分部视图的 <see cref="T:System.Web.Mvc.PartialViewResult" /> 对象。</summary>
      <returns>分部视图结果对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.Object)">
      <summary>使用指定的模型创建一个呈现分部视图的 <see cref="T:System.Web.Mvc.PartialViewResult" /> 对象。</summary>
      <returns>分部视图结果对象。</returns>
      <param name="model">分部视图呈现的模型</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String)">
      <summary>使用指定的视图名称创建一个呈现分部视图的 <see cref="T:System.Web.Mvc.PartialViewResult" /> 对象。</summary>
      <returns>分部视图结果对象。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String,System.Object)">
      <summary>使用指定的视图名称和模型创建一个呈现分部视图的 <see cref="T:System.Web.Mvc.PartialViewResult" /> 对象。</summary>
      <returns>分部视图结果对象。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
      <param name="model">分部视图呈现的模型</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Redirect(System.String)">
      <summary>创建一个重定向到指定的 URL 的 <see cref="T:System.Web.Mvc.RedirectResult" /> 对象。</summary>
      <returns>重定向结果对象。</returns>
      <param name="url">要重定向到的 URL。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String)">
      <summary>使用操作名称重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Object)">
      <summary>使用操作名称和路由值重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String)">
      <summary>使用操作名称和控制器名称重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
      <summary>使用操作名称、控制器名称和路由值重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用操作名称、控制器名称和路由字典重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用操作名称和路由字典重定向到指定的操作。</summary>
      <returns>重定向结果对象。</returns>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Object)">
      <summary>使用指定的路由值重定向到指定的路由。</summary>
      <returns>重定向-路由结果对象。</returns>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String)">
      <summary>使用路由名称重定向到指定的路由。</summary>
      <returns>重定向-路由结果对象。</returns>
      <param name="routeName">路由的名称</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
      <summary>使用路由名称和路由值重定向到指定的路由。</summary>
      <returns>重定向-路由结果对象。</returns>
      <param name="routeName">路由的名称</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用路由名称和路由字典重定向到指定的路由。</summary>
      <returns>重定向-路由结果对象。</returns>
      <param name="routeName">路由的名称</param>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>使用路由字典重定向到指定的路由。</summary>
      <returns>重定向-路由结果对象。</returns>
      <param name="routeValues">路由的参数。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Request">
      <summary>为当前 HTTP 请求获取 <see cref="T:System.Web.HttpRequestBase" /> 对象。</summary>
      <returns>请求对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Response">
      <summary>为当前 HTTP 响应获取 <see cref="T:System.Web.HttpResponseBase" /> 对象。</summary>
      <returns>响应对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.RouteData">
      <summary>为当前请求获取路由数据。</summary>
      <returns>路由数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Server">
      <summary>获取提供 Web 请求处理期间使用的方法的 <see cref="T:System.Web.HttpServerUtilityBase" /> 对象。</summary>
      <returns>HTTP 服务器对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Session">
      <summary>为当前 HTTP 请求获取 <see cref="T:System.Web.HttpSessionStateBase" /> 对象。</summary>
      <returns>当前 HTTP 请求的 HTTP 会话状态对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IAuthorizationFilter#OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IExceptionFilter#OnException(System.Web.Mvc.ExceptionContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>此 API 支持 MVC 基础结构，并且不应在代码中直接使用。此方法调用 <see cref="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> 方法。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.TempDataProvider">
      <summary>获取用于为下一个请求存储数据的临时数据提供程序对象。</summary>
      <returns>临时数据提供程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0)">
      <summary>使用来自控制器的当前值提供程序的值更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 参数或 <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String)">
      <summary>使用来自控制器的当前值提供程序的值和前缀更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 参数或 <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[])">
      <summary>使用来自控制器的当前值提供程序的值、前缀和包含的属性更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 参数或 <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>使用来自控制器的当前值提供程序的值、前缀、要排除的属性列表和要包含的属性列表更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="excludeProperties">要从该更新中显式排除的属性列表。即使 <paramref name="includeProperties" /> 参数列表中列出了这些属性，也会将其排除。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 参数或 <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值、前缀、要排除的属性列表和要包含的属性列表更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="excludeProperties">要从该更新中显式排除的属性列表。即使 <paramref name="includeProperties" /> 参数列表中列出了这些属性，也会将其排除。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值、前缀和包含的属性更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值和前缀更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[])">
      <summary>使用来自控制器的当前值提供程序的值和包含的属性更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 参数或 <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值和要包含的属性列表更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值更新指定的模型实例。</summary>
      <returns>如果更新成功，则为 true；否则为 false。</returns>
      <param name="model">要更新的模型实例。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0)">
      <summary>使用来自控制器的当前值提供程序的值更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">未成功更新模型。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String)">
      <summary>使用来自控制器的当前值提供程序的值和前缀更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[])">
      <summary>使用来自控制器的当前值提供程序的值、前缀和包含的属性更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>使用来自控制器的当前值提供程序的值、前缀、要排除的属性列表和要包含的属性列表更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="excludeProperties">要从该更新中显式排除的属性列表。即使 <paramref name="includeProperties" /> 列表中列出了这些属性，也会将其排除。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值、前缀、要排除的属性列表和要包含的属性列表更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="excludeProperties">要从该更新中显式排除的属性列表。即使 <paramref name="includeProperties" /> 参数列表中列出了这些属性，也会将其排除。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值、前缀和要包含的属性列表更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值和前缀更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="prefix">在值提供程序中查找值时要使用的前缀。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[])">
      <summary>使用来自控制器对象的当前值提供程序的值更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值、前缀和要包含的属性列表更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="includeProperties">一个要更新的模型的属性列表。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>使用来自值提供程序的值更新指定的模型实例。</summary>
      <param name="model">要更新的模型实例。</param>
      <param name="valueProvider">可用于更新模型的值字典。</param>
      <typeparam name="TModel">模型对象的类型。</typeparam>
    </member>
    <member name="P:System.Web.Mvc.Controller.Url">
      <summary>使用路由获取用于生成 URL 的 URL 帮助器对象。</summary>
      <returns>URL 帮助器对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.User">
      <summary>为当前 HTTP 请求获取用户安全信息。</summary>
      <returns>当前 HTTP 请求的用户安全信息。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View">
      <summary>创建一个将视图呈现给响应的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>将视图呈现给响应的视图结果。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Object)">
      <summary>使用模型创建一个将视图呈现给响应的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="model">视图呈现的模型。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String)">
      <summary>使用视图名称创建一个呈现视图的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.Object)">
      <summary>使用视图名称和模型创建一个将视图呈现给响应的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
      <param name="model">视图呈现的模型。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String)">
      <summary>使用视图名称和母版页名称创建一个将视图呈现给响应的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
      <param name="masterName">在呈现视图时要使用的母版页或模板的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String,System.Object)">
      <summary>使用视图名称、母版页名称和模型创建一个呈现视图的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="viewName">为响应呈现的视图的名称。</param>
      <param name="masterName">在呈现视图时要使用的母版页或模板的名称。</param>
      <param name="model">视图呈现的模型。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView)">
      <summary>创建一个呈现指定的 <see cref="T:System.Web.Mvc.IView" /> 对象的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="view">为响应呈现的视图。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView,System.Object)">
      <summary>创建一个呈现指定的 <see cref="T:System.Web.Mvc.IView" /> 对象的 <see cref="T:System.Web.Mvc.ViewResult" /> 对象。</summary>
      <returns>视图结果。</returns>
      <param name="view">为响应呈现的视图。</param>
      <param name="model">视图呈现的模型。</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerActionInvoker">
      <summary>表示一个类，该类负责调用控制器的操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ControllerActionInvoker" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerActionInvoker.Binders">
      <summary>获取或设置与操作关联的模型联编程序。</summary>
      <returns>与操作关联的模型联编程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.CreateActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Object)">
      <summary>创建操作结果。</summary>
      <returns>操作结果对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="actionReturnValue">操作返回值。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
      <summary>查找有关操作方法的信息。</summary>
      <returns>有关操作方法的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="controllerDescriptor">控制器描述符。</param>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>使用指定的控制器上下文来检索有关控制器的信息。</summary>
      <returns>有关控制器的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>检索有关操作筛选器的信息。</summary>
      <returns>有关操作筛选器的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
      <summary>获取指定的操作-方法参数的值。</summary>
      <returns>操作-方法参数的值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameterDescriptor">参数描述符。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValues(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>获取操作-方法参数的值。</summary>
      <returns>操作-方法参数的值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的控制器上下文来调用指定操作。</summary>
      <returns>执行操作的结果。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">要调用的操作的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或空。</exception>
      <exception cref="T:System.Threading.ThreadAbortException">线程在操作的调用过程中被中止。</exception>
      <exception cref="T:System.Exception">操作的调用过程中发生未指定的错误。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的参数和控制器上下文来调用指定的操作方法。</summary>
      <returns>执行操作方法的结果。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="parameters">参数。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的参数、控制器上下文和操作筛选器来调用指定的操作方法。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 ActionExecuted 方法的上下文。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="filters">操作筛选器。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="parameters">参数。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>使用指定的控制器上下文来调用指定的操作结果。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionResult">操作结果。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IResultFilter},System.Web.Mvc.ActionResult)">
      <summary>使用指定的操作筛选器和控制器上下文来调用指定的操作结果。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 ResultExecuted 方法的上下文。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="filters">操作筛选器。</param>
      <param name="actionResult">操作结果。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthorizationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IAuthorizationFilter},System.Web.Mvc.ActionDescriptor)">
      <summary>使用指定的操作描述符和控制器上下文来调用指定的授权筛选器。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 对象的上下文。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="filters">授权筛选器。</param>
      <param name="actionDescriptor">操作描述符。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeExceptionFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IExceptionFilter},System.Exception)">
      <summary>使用指定的异常和控制器上下文来调用指定的异常筛选器。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> 对象的上下文。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="filters">异常筛选器。</param>
      <param name="exception">异常。</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerBase">
      <summary>表示所有 MVC 控制器的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ControllerBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ControllerContext">
      <summary>获取或设置控制器上下文。</summary>
      <returns>控制器上下文。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Execute(System.Web.Routing.RequestContext)">
      <summary>执行指定的请求上下文。</summary>
      <param name="requestContext">请求上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.ExecuteCore">
      <summary>执行请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Initialize(System.Web.Routing.RequestContext)">
      <summary>初始化指定的请求上下文。</summary>
      <param name="requestContext">请求上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.System#Web#Mvc#IController#Execute(System.Web.Routing.RequestContext)">
      <summary>执行指定的请求上下文。</summary>
      <param name="requestContext">请求上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.TempData">
      <summary>获取或设置临时数据的字典。</summary>
      <returns>临时数据的字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValidateRequest">
      <summary>获取或设置一个值，该值指示请求是否有效。</summary>
      <returns>如果请求有效，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValueProvider">
      <summary>获取或设置控制器的值提供程序。</summary>
      <returns>控制器的值提供程序。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewData">
      <summary>获取或设置视图数据的字典。</summary>
      <returns>视图数据的字典。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerBuilder">
      <summary>表示一个类，该类负责动态生成控制器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ControllerBuilder" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.Current">
      <summary>获取当前的控制器生成器对象。</summary>
      <returns>当前的控制器生成器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.DefaultNamespaces">
      <summary>获取默认命名空间。</summary>
      <returns>默认命名空间。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.GetControllerFactory">
      <summary>获取关联的控制器工厂。</summary>
      <returns>控制器工厂。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Type)">
      <summary>使用指定的类型来设置控制器工厂。</summary>
      <param name="controllerFactoryType">控制器工厂的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerFactoryType" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">从 <paramref name="controllerFactoryType" /> 参数中的类型不能分配控制器工厂。</exception>
      <exception cref="T:System.InvalidOperationException">设置控制器工厂时发生错误。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Web.Mvc.IControllerFactory)">
      <summary>设置指定的控制器工厂。</summary>
      <param name="controllerFactory">控制器工厂。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerFactory" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ControllerContext">
      <summary>封装有关与指定的 <see cref="T:System.Web.Routing.RouteBase" /> 和 <see cref="T:System.Web.Mvc.ControllerBase" /> 实例匹配的 HTTP 请求的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ControllerContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,System.Web.Mvc.ControllerBase)">
      <summary>使用指定的 HTTP 上下文、URL 路由数据和控制器来初始化 <see cref="T:System.Web.Mvc.ControllerContext" /> 类的新实例。</summary>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="routeData">路由数据。</param>
      <param name="controller">控制器。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>使用指定的控制器上下文来初始化 <see cref="T:System.Web.Mvc.ControllerContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Routing.RequestContext,System.Web.Mvc.ControllerBase)">
      <summary>使用指定的请求上下文和控制器来初始化 <see cref="T:System.Web.Mvc.ControllerContext" /> 类的新实例。</summary>
      <param name="requestContext">请求上下文。</param>
      <param name="controller">控制器。</param>
      <exception cref="T:System.ArgumentNullException">一个参数或两个参数都是 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.Controller">
      <summary>获取或设置控制器。</summary>
      <returns>控制器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.HttpContext">
      <summary>获取或设置 HTTP 上下文。</summary>
      <returns>HTTP 上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.IsChildAction">
      <summary>获取一个值，该值指示关联的操作方法是否为子操作。</summary>
      <returns>如果关联的操作方法为子操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.ParentActionViewContext">
      <summary>获取一个对象，该对象包含父操作方法的视图上下文信息。</summary>
      <returns>一个对象，包含父操作方法的视图上下文信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RequestContext">
      <summary>获取或设置请求上下文。</summary>
      <returns>请求上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RouteData">
      <summary>获取或设置 URL 路由数据。</summary>
      <returns>URL 路由数据。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerDescriptor">
      <summary>封装描述控制器的信息，如控制器的名称、类型和操作。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ControllerDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerName">
      <summary>获取控制器的名称。</summary>
      <returns>控制器的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerType">
      <summary>获取控制器的类型。</summary>
      <returns>控制器的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的名称和控制器上下文来查找操作方法。</summary>
      <returns>有关操作方法的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCanonicalActions">
      <summary>在控制器中检索操作-方法描述符的列表。</summary>
      <returns>控制器中的操作-方法描述符的列表。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>检索为此成员定义的自定义特性，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>检索为此成员定义的指定类型的自定义特性（指定的特性除外）。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>检索一个值，该值指示是否为此成员定义指定的自定义特性的一个或多个实例。</summary>
      <returns>如果为此成员定义 <paramref name="attributeType" />，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Web.Mvc.CustomModelBinderAttribute">
      <summary>表示一个调用自定义模型联编程序的特性。</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.CustomModelBinderAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.GetBinder">
      <summary>检索关联的模型联编程序。</summary>
      <returns>对实现 <see cref="T:System.Web.Mvc.IModelBinder" /> 接口的对象的引用。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadata">
      <summary>为数据模型的公共元数据、<see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> 类和 <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> 类提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.#ctor(System.Web.Mvc.DataAnnotationsModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute)">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> 类的新实例。</summary>
      <param name="provider">数据批注模型元数据提供程序。</param>
      <param name="containerType">容器的类型。</param>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="displayColumnAttribute">显示列特性。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.GetSimpleDisplayText">
      <summary>返回模型数据的简单文本。</summary>
      <returns>模型数据的简单文本。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider">
      <summary>实现 ASP.NET MVC 的默认模型元数据提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>获取指定属性的元数据。</summary>
      <returns>属性的元数据。</returns>
      <param name="attributes">特性。</param>
      <param name="containerType">容器的类型。</param>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidationFactory">
      <summary>表示创建 <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> 实例的方法。</summary>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator">
      <summary>提供模型验证程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> 类的新实例。</summary>
      <param name="metadata">模型的元数据。</param>
      <param name="context">模型的控制器上下文。</param>
      <param name="attribute">模型的验证特性。</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.Attribute">
      <summary>获取模型验证程序的验证特性。</summary>
      <returns>模型验证程序的验证特性。</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.ErrorMessage">
      <summary>获取验证失败的错误消息。</summary>
      <returns>验证失败的错误消息。</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.Validate(System.Object)">
      <summary>返回模型的验证错误消息的列表。</summary>
      <returns>模型的验证错误消息的列表，如果未出现错误，则为空列表。</returns>
      <param name="container">模型的容器。</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator`1">
      <summary>为指定验证类型提供模型验证程序。</summary>
      <typeparam name="TAttribute"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,`0)">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> 类的新实例。</summary>
      <param name="metadata">模型的元数据。</param>
      <param name="context">模型的控制器上下文。</param>
      <param name="attribute">模型的验证特性。</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator`1.Attribute">
      <summary>获取模型验证程序的验证特性。</summary>
      <returns>模型验证程序的验证特性。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider">
      <summary>实现 MVC 的默认验证提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>获取验证程序的列表。</summary>
      <returns>验证程序的列表。</returns>
      <param name="metadata">元数据。</param>
      <param name="context">上下文。</param>
      <param name="attributes">验证特性的列表。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>注册适配器以提供客户端验证。</summary>
      <param name="attributeType">验证特性的类型。</param>
      <param name="adapterType">适配器的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>为验证提供程序注册适配器工厂。</summary>
      <param name="attributeType">属性的类型。</param>
      <param name="factory">将用于为指定特性创建 <see cref="T:System.Web.Mvc.ModelValidator" /> 对象的工厂。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>注册默认适配器。</summary>
      <param name="adapterType">适配器的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>注册默认适配器工厂。</summary>
      <param name="factory">将用于为默认适配器创建 <see cref="T:System.Web.Mvc.ModelValidator" /> 对象的工厂。</param>
    </member>
    <member name="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider">
      <summary>为错误信息模型验证程序提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>获取错误信息模型验证程序的列表。</summary>
      <returns>错误信息模型验证程序的列表。</returns>
      <param name="metadata">模型元数据。</param>
      <param name="context">控制器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultControllerFactory">
      <summary>表示默认情况下已注册的控制器工厂。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>使用指定的请求上下文来创建指定的控制器。</summary>
      <returns>对控制器的引用。</returns>
      <param name="requestContext">HTTP 请求的上下文，其中包括 HTTP 上下文和路由数据。</param>
      <param name="controllerName">控制器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerName" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
      <summary>检索指定请求上下文和控制器类型的控制器实例。</summary>
      <returns>控制器实例。</returns>
      <param name="requestContext">HTTP 请求的上下文，其中包括 HTTP 上下文和路由数据。</param>
      <param name="controllerType">控制器的类型。</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="controllerType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不能分配 <paramref name="controllerType" />。</exception>
      <exception cref="T:System.InvalidOperationException">不能创建 <paramref name="controllerType" /> 的实例。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>检索指定名称和请求上下文的控制器类型。</summary>
      <returns>控制器类型。</returns>
      <param name="requestContext">HTTP 请求的上下文，其中包括 HTTP 上下文和路由数据。</param>
      <param name="controllerName">控制器的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>释放指定的控制器。</summary>
      <param name="controller">要发布的控制器。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultModelBinder">
      <summary>将浏览器请求映射到数据对象。该类提供模型联编程序的具体实现。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DefaultModelBinder" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.Binders">
      <summary>获取或设置应用程序的模型联编程序。</summary>
      <returns>应用程序的模型联编程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>使用指定的控制器上下文和绑定上下文来绑定模型。</summary>
      <returns>绑定对象。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext " /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
      <summary>使用指定的控制器上下文、绑定上下文和指定的属性描述符来绑定指定的属性。</summary>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="propertyDescriptor">描述要绑定的属性。该描述符提供组件类型、属性类型和属性值等信息。它还提供用于获取或设置属性值的方法。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
      <summary>使用指定的控制器上下文和绑定上下文来创建指定的模型类型。</summary>
      <returns>指定类型的数据对象。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="modelType">要返回的模型对象的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.Int32)">
      <summary>基于组成较大索引的组件类别创建索引（子索引），其中指定的索引值为整数。</summary>
      <returns>子索引的名称。</returns>
      <param name="prefix">子索引的前缀。</param>
      <param name="index">索引值。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.String)">
      <summary>基于组成较大索引的组件类别创建索引（子索引），其中指定的索引值为字符串。</summary>
      <returns>子索引的名称。</returns>
      <param name="prefix">子索引的前缀。</param>
      <param name="index">索引值。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String,System.String)">
      <summary>使用指定的前缀和属性名称创建子属性的名称。</summary>
      <returns>子属性的名称。</returns>
      <param name="prefix">子属性的前缀。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>返回一组与由指定的 <paramref name="binding context" /> 确定的属性筛选器限制相匹配的属性。</summary>
      <returns>一组可枚举的属性描述符。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>使用指定的控制器上下文和绑定上下文来返回模型的属性。</summary>
      <returns>属性描述符的集合。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Web.Mvc.IModelBinder)">
      <summary>使用指定的控制器上下文、绑定上下文、属性描述符和属性联编程序来返回属性值。</summary>
      <returns>一个对象，表示属性值。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="propertyDescriptor">要访问的属性的描述符。该描述符提供组件类型、属性类型和属性值等信息。它还提供用于获取或设置属性值的方法。</param>
      <param name="propertyBinder">一个对象，提供用于绑定属性的方式。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>返回类型的描述符对象，该类型是使用其控制器上下文和绑定上下文来指定的。</summary>
      <returns>自定义类型描述符对象。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext)">
      <summary>确定数据模型对指定的绑定上下文是否有效。</summary>
      <returns>如果该模型有效，则为 true；否则为 false。</returns>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>在更新模型后调用。</summary>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>在更新模型时调用。</summary>
      <returns>如果正在更新模型，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>在验证指定的属性后调用。</summary>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="propertyDescriptor">描述要验证的属性。该描述符提供组件类型、属性类型和属性值等信息。它还提供用于获取或设置属性值的方法。</param>
      <param name="value">为属性设置的值。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>在验证指定的属性时调用。</summary>
      <returns>如果正在验证属性，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="propertyDescriptor">描述要验证的属性。该描述符提供组件类型、属性类型和属性值等信息。它还提供用于获取或设置属性值的方法。</param>
      <param name="value">为属性设置的值。</param>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.ResourceClassKey">
      <summary>获取或设置包含本地化字符串值的资源文件的名称（类键）。</summary>
      <returns>资源文件的名称（类键）。</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>使用指定的控制器上下文、绑定上下文和属性值来设置指定的属性。</summary>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
      <param name="propertyDescriptor">描述要设置的属性。该描述符提供组件类型、属性类型和属性值等信息。它还提供用于获取或设置属性值的方法。</param>
      <param name="value">为属性设置的值。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultViewLocationCache">
      <summary>表示视图位置的内存缓存。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor(System.TimeSpan)">
      <summary>使用指定的缓存时间跨度初始化 <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> 类的新实例。</summary>
      <param name="timeSpan">缓存时间跨度。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="timeSpan" /> 参数的 Ticks 属性设置为负值。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>使用指定的 HTTP 上下文和缓存键检索默认的视图位置。</summary>
      <returns>默认的视图位置。</returns>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="key">缓存键</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>使用指定的 HTTP 上下文、缓存键和虚拟路径反转指定的虚拟路径中的视图。</summary>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="key">缓存键。</param>
      <param name="virtualPath">虚拟路径</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> 参数为 null。</exception>
    </member>
    <member name="F:System.Web.Mvc.DefaultViewLocationCache.Null">
      <summary>创建空视图位置缓存。</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultViewLocationCache.TimeSpan">
      <summary>获取或设置缓存时间跨度。</summary>
      <returns>缓存时间跨度。</returns>
    </member>
    <member name="T:System.Web.Mvc.DictionaryValueProvider`1">
      <summary>表示值提供程序的基类，这些值提供程序的值来自实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 接口的集合。</summary>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.#ctor"></member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetCulture(System.Web.Mvc.ControllerContext)"></member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetDictionary(System.Web.Mvc.ControllerContext)"></member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="T:System.Web.Mvc.EmptyModelMetadataProvider">
      <summary>为不需要元数据的数据模型提供空的元数据提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.EmptyModelMetadataProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>创建 <see cref="T:System.Web.Mvc.ModelMetadata" /> 类的新实例。</summary>
      <returns>模型元数据的空实例。</returns>
      <param name="attributes">特性。</param>
      <param name="containerType">容器的类型。</param>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
      <param name="propertyName">模型的名称。</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelValidatorProvider">
      <summary>为不需要验证程序的模型提供空的验证提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.EmptyModelValidatorProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>获取空的模型验证程序。</summary>
      <returns>空的模型验证程序。</returns>
      <param name="metadata">元数据。</param>
      <param name="context">上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyResult">
      <summary>表示一个不执行任何操作的结果，如不返回任何内容的控制器操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.EmptyResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>执行指定的结果上下文。</summary>
      <param name="context">结果上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.ExceptionContext">
      <summary>提供使用 <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> 类的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ExceptionContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor(System.Web.Mvc.ControllerContext,System.Exception)">
      <summary>使用指定的控制器上下文针对指定的异常初始化 <see cref="T:System.Web.Mvc.ExceptionContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="exception">异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Exception">
      <summary>获取或设置异常对象。</summary>
      <returns>异常对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.ExceptionHandled">
      <summary>获取或设置一个值，该值指示是否已处理异常。</summary>
      <returns>如果已处理异常，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Result">
      <summary>获取或设置操作结果。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ExpressionHelper">
      <summary>提供用于从表达式中获取模型名称的帮助器类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
      <summary>从 lambda 表达式中获取模型名称。</summary>
      <returns>模型名称。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.String)">
      <summary>从字符串表达式中获取模型名称。</summary>
      <returns>模型名称。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="T:System.Web.Mvc.FieldValidationMetadata">
      <summary>为客户端字段验证元数据提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.FieldValidationMetadata.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.FieldValidationMetadata" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.FieldName">
      <summary>获取或设置数据字段的名称。</summary>
      <returns>数据字段的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ReplaceValidationMessageContents">
      <summary>获取或设置一个值，该值指示是否应使用客户端验证错误替换验证消息内容。</summary>
      <returns>如果应使用客户端验证错误替换验证消息内容，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationMessageId">
      <summary>获取或设置验证程序消息 ID。</summary>
      <returns>验证程序消息 ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationRules">
      <summary>获取客户端验证规则。</summary>
      <returns>客户端验证规则。</returns>
    </member>
    <member name="T:System.Web.Mvc.FileContentResult">
      <summary>将二进制文件的内容发送到响应。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
      <summary>使用指定的文件内容和内容类型来初始化 <see cref="T:System.Web.Mvc.FileContentResult" /> 类的新实例。</summary>
      <param name="fileContents">要发送到响应的字节数组。</param>
      <param name="contentType">要用于响应的内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileContents" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileContentResult.FileContents">
      <summary>要发送到响应的二进制内容。</summary>
      <returns>文件内容。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>将文件内容写入响应。</summary>
      <param name="response">响应。</param>
    </member>
    <member name="T:System.Web.Mvc.FilePathResult">
      <summary>将文件的内容发送到响应。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.#ctor(System.String,System.String)">
      <summary>使用指定的文件名和内容类型来初始化 <see cref="T:System.Web.Mvc.FilePathResult" /> 类的新实例。</summary>
      <param name="fileName">要发送到响应的文件的名称。</param>
      <param name="contentType">响应的内容类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 参数为 null 或空。</exception>
    </member>
    <member name="P:System.Web.Mvc.FilePathResult.FileName">
      <summary>获取或设置发送到响应的文件的路径。</summary>
      <returns>发送到响应的文件的路径。</returns>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>将文件写入响应。</summary>
      <param name="response">响应。</param>
    </member>
    <member name="T:System.Web.Mvc.FileResult">
      <summary>表示一个用于将二进制文件内容发送到响应的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileResult.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.FileResult" /> 类的新实例。</summary>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> 参数为 null 或空。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.ContentType">
      <summary>获取用于响应的内容类型。</summary>
      <returns>内容的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.FileDownloadName">
      <summary>获取或设置内容-处置标头，以使文件-下载对话框在浏览器中显示时包含指定的文件名。</summary>
      <returns>文件名。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>将文件写入响应。</summary>
      <param name="response">响应。</param>
    </member>
    <member name="T:System.Web.Mvc.FileStreamResult">
      <summary>使用 <see cref="T:System.IO.Stream" /> 实例将二进制内容发送到响应。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.FileStreamResult" /> 类的新实例。</summary>
      <param name="fileStream">要发送到响应的流。</param>
      <param name="contentType">要用于响应的内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileStreamResult.FileStream">
      <summary>获取将发送到响应的流。</summary>
      <returns>文件流。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>将文件写入响应。</summary>
      <param name="response">响应。</param>
    </member>
    <member name="T:System.Web.Mvc.FilterAttribute">
      <summary>表示操作-筛选器特性的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.FilterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.Order">
      <summary>获取或者设置执行操作筛选器的顺序。</summary>
      <returns>执行操作筛选器的顺序。</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterInfo">
      <summary>封装有关可用的操作筛选器的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.FilterInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ActionFilters">
      <summary>获取应用程序中的所有操作筛选器。</summary>
      <returns>所有操作筛选器。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthorizationFilters">
      <summary>获取应用程序中的所有授权筛选器。</summary>
      <returns>授权筛选器。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ExceptionFilters">
      <summary>获取应用程序中的所有异常筛选器。</summary>
      <returns>异常筛选器。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ResultFilters">
      <summary>获取应用程序中的所有结果筛选器。</summary>
      <returns>结果筛选器。</returns>
    </member>
    <member name="T:System.Web.Mvc.FormCollection">
      <summary>包含应用程序的窗体值提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.FormCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>初始化 <see cref="T:System.Web.Mvc.FormCollection" /> 类的新实例。</summary>
      <param name="collection">集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.GetValue(System.String)">
      <summary>获取指定的值提供程序。</summary>
      <returns>值提供程序。</returns>
      <param name="name">要获取的值提供程序的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)">
      <summary>获取一个值，该值指示值提供程序是否包含具有指定前缀的项。</summary>
      <returns>如果值提供程序包含具有指定前缀的项，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="prefix">要查找的前缀。</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#GetValue(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定键从值提供程序中获取值。</summary>
      <returns>来自值提供程序的值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="key">键。</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.ToValueProvider">
      <summary>返回包含值提供程序的字典。</summary>
      <returns>值提供程序的字典。</returns>
    </member>
    <member name="T:System.Web.Mvc.FormContext">
      <summary>对验证和处理 HTML 窗体中的输入数据所需的信息进行封装。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.FormContext" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FieldValidators">
      <summary>获取窗体的字段验证程序。</summary>
      <returns>窗体的字段验证程序的字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FormId">
      <summary>获取或设置窗体标识符。</summary>
      <returns>窗体标识符。</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetJsonValidationMetadata">
      <summary>检索一个序列化对象，该对象包含窗体标识符和窗体的字段验证值。</summary>
      <returns>一个序列化对象，包含窗体的窗体标识符和字段验证值。</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String)">
      <summary>检索指定的输入字段的验证值。</summary>
      <returns>要使用其验证字段输入的值。</returns>
      <param name="fieldName">要为其检索验证值的字段的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
      <summary>检索指定输入字段的验证值和指示未找到验证值时要采取的操作的值。</summary>
      <returns>要使用其验证字段输入的值。</returns>
      <param name="fieldName">要为其检索验证值的字段的名称。</param>
      <param name="createIfNotFound">true 表示在找不到验证值时创建一个验证值；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 参数为 null 或为空。</exception>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ReplaceValidationSummary">
      <summary>确定是否应将客户端验证错误动态添加到验证摘要中。</summary>
      <returns>如果应将客户端验证错误添加到验证摘要中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ValidationSummaryId">
      <summary>获取或设置验证摘要的标识符。</summary>
      <returns>验证摘要的标识符。</returns>
    </member>
    <member name="T:System.Web.Mvc.FormMethod">
      <summary>枚举窗体的 HTTP 请求类型。</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Get">
      <summary>指定 GET 请求。</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Post">
      <summary>指定 POST 请求。</summary>
    </member>
    <member name="T:System.Web.Mvc.FormValueProvider">
      <summary>表示 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象中包含的窗体值的值提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProvider.#ctor"></member>
    <member name="T:System.Web.Mvc.HandleErrorAttribute">
      <summary>表示一个特性，该特性用于处理由操作方法引发的异常。</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.ExceptionType">
      <summary>获取或设置异常的类型。</summary>
      <returns>异常的类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.Master">
      <summary>获取或设置用于显示异常信息的母版视图。</summary>
      <returns>母版视图。</returns>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>在发生异常时调用。</summary>
      <param name="filterContext">操作-筛选器上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.View">
      <summary>获取或设置用于显示异常信息的页视图。</summary>
      <returns>页视图。</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorInfo">
      <summary>封装有关处理由操作方法引发的错误的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorInfo.#ctor(System.Exception,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.HandleErrorInfo" /> 类的新实例。</summary>
      <param name="exception">异常。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="actionName">操作的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerName" /> 或 <paramref name="actionName" /> 参数为 null 或为空。</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ActionName">
      <summary>获取或设置在引发异常时正在执行的操作的名称。</summary>
      <returns>操作的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ControllerName">
      <summary>获取或设置包含引发异常的操作方法的控制器的名称。</summary>
      <returns>控制器的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.Exception">
      <summary>获取或设置异常对象。</summary>
      <returns>异常对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.HiddenInputAttribute">
      <summary>表示一个特性，该特性用于指示是否应将属性值或字段值呈现为隐藏 input 元素。</summary>
    </member>
    <member name="M:System.Web.Mvc.HiddenInputAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HiddenInputAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.HiddenInputAttribute.DisplayValue">
      <summary>获取或设置一个值，该值指示是否要显示隐藏 input 元素的值。</summary>
      <returns>如果应显示该值，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper">
      <summary>表示支持在视图中呈现 HTML 控件。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>使用指定的视图上下文和视图数据容器来初始化 <see cref="T:System.Web.Mvc.HtmlHelper" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewContext" /> 或 <paramref name="viewDataContainer" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>使用指定的视图上下文、视图数据容器和路由集合来初始化 <see cref="T:System.Web.Mvc.HtmlHelper" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <param name="routeCollection">路由集合。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken">
      <summary>生成一个隐藏的窗体字段（防伪标记），在提交窗体时将验证此字段。</summary>
      <returns>生成的窗体字段（防伪标记）。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String)">
      <summary>生成一个隐藏的窗体字段（防伪标记），在提交窗体时将验证此字段。使用指定的 salt 值生成字段值。</summary>
      <returns>生成的窗体字段（防伪标记）。</returns>
      <param name="salt">salt 值，可以为任何非空字符串。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
      <summary>生成一个隐藏的窗体字段（防伪标记），在提交窗体时将验证此字段。使用指定的 salt 值、域和路径生成字段值。</summary>
      <returns>生成的窗体字段（防伪标记）。</returns>
      <param name="salt">salt 值，可以为任何非空字符串。</param>
      <param name="domain">应用程序域。</param>
      <param name="path">虚拟路径。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.Object)">
      <summary>将指定的特性对象转换为 HTML 编码的字符串。</summary>
      <returns>HTML 编码的字符串。如果值参数为 null 或空，则此方法返回空字符串。</returns>
      <param name="value">要编码的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.String)">
      <summary>将指定的特性字符串转换为 HTML 编码的字符串。</summary>
      <returns>HTML 编码的字符串。如果值参数为 null 或空，则此方法返回空字符串。</returns>
      <param name="value">要编码的字符串。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation">
      <summary>启用通过在浏览器中使用客户端脚本来执行的输入验证。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.Object)">
      <summary>将指定值转换为 HTML 编码的字符串。</summary>
      <returns>HTML 编码的字符串。</returns>
      <param name="value">要编码的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.String)">
      <summary>将指定值转换为 HTML 编码的字符串。</summary>
      <returns>HTML 编码的字符串。</returns>
      <param name="value">要编码的字符串。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String)">
      <summary>使用指定元素名称创建 HTML 元素标识符。</summary>
      <returns>HTML 元素的 ID。</returns>
      <param name="name">HTML 元素的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String,System.String)">
      <summary>使用指定元素名称和用于替换名称中的点的字符串，来创建 HTML 元素标识符。</summary>
      <returns>HTML 元素的 ID。</returns>
      <param name="name">HTML 元素的名称。</param>
      <param name="idAttributeDotReplacement">替换<paramref name="name" /> 参数中的点 (.) 的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数或 <paramref name="idAttributeDotReplacement" /> 参数是 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>生成链接到指定操作方法的 HTML 定位元素（a 元素）。</summary>
      <returns>链接到指定操作方法的 HTML 元素。</returns>
      <param name="requestContext">HTTP 请求的上下文。</param>
      <param name="routeCollection">URL 路由的集合。</param>
      <param name="linkText">为该链接显示的文本标题。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="protocol">通信协议，如“http”或“https”。如果此参数为 null，则该协议默认为“http”。</param>
      <param name="hostName">主机名。</param>
      <param name="fragment">片段标识符。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>生成链接到指定操作方法的 HTML 定位元素（a 元素）。</summary>
      <returns>链接到指定操作方法的 HTML 元素。</returns>
      <param name="requestContext">HTTP 请求的上下文。</param>
      <param name="routeCollection">URL 路由的集合。</param>
      <param name="linkText">为该链接显示的文本标题。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>生成链接到指定 URL 路由的 HTML 定位元素（a 元素）。</summary>
      <returns>链接到指定 URL 路由的 HTML 元素。</returns>
      <param name="requestContext">HTTP 请求的上下文。</param>
      <param name="routeCollection">URL 路由的集合。</param>
      <param name="linkText">为该链接显示的文本标题。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="protocol">通信协议，如“http”或“https”。如果此参数为 null，则该协议默认为“http”。</param>
      <param name="hostName">主机名。</param>
      <param name="fragment">片段标识符。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>生成链接到指定 URL 路由的 HTML 定位元素（a 元素）。</summary>
      <returns>链接到指定 URL 路由的 HTML 元素。</returns>
      <param name="requestContext">HTTP 请求的上下文。</param>
      <param name="routeCollection">URL 路由的集合。</param>
      <param name="linkText">为该链接显示的文本标题。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetFormMethodString(System.Web.Mvc.FormMethod)">
      <summary>将处理窗体输入的 HTTP 方法（GET 或 POST）转换为字符串。</summary>
      <returns>窗体方法字符串（“get”或“post”）。</returns>
      <param name="method">处理窗体的 HTTP 方法。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetInputTypeString(System.Web.Mvc.InputType)">
      <summary>将 HTML 输入控件类型转换为字符串。</summary>
      <returns>输入类型字符串（“复选框”、“隐藏”、“密码”、“单选”或“文本”）。</returns>
      <param name="inputType">枚举的输入类型。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.String)">
      <summary>返回使用客户端所用 HTTP 数据传输方法的重写方法。</summary>
      <returns>使用客户端所用 HTTP 数据传输方法的重写方法。</returns>
      <param name="httpMethod">客户端使用的 HTTP 数据传输方法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="httpMethod" />参数为 null，它是一个空字符串，或设置为“GET”或“POST”。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.Web.Mvc.HttpVerbs)">
      <summary>返回使用表示客户端所用 HTTP 数据传输方法的谓词的重写方法。</summary>
      <returns>使用表示客户端所用 HTTP 数据传输方法的谓词的重写方法。</returns>
      <param name="httpVerb">表示客户端使用的 HTTP 数据传输方法的谓词。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="httpVerb" /> 参数不是“PUT”、“DELETE”或“HEAD”。</exception>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.IdAttributeDotReplacement">
      <summary>获取或设置替换元素的 ID 特性中的句号的字符。</summary>
      <returns>替换元素的 ID 特性中的句号的字符。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.RouteCollection">
      <summary>获取或设置应用程序的路由的集合。</summary>
      <returns>应用程序的路由的集合。</returns>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputCssClassName">
      <summary>用于输入验证错误消息的 CSS 类的名称。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputValidCssClassName">
      <summary>用于设置输入验证消息样式的 CSS 类的名称。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageCssClassName">
      <summary>用于字段验证错误消息的 CSS 类的名称。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageValidCssClassName">
      <summary>用于在输入有效时设置验证消息样式的 CSS 类的名称。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryCssClassName">
      <summary>用于验证摘要错误消息的 CSS 类的名称。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryValidCssClassName">
      <summary>用于在输入有效时设置验证摘要样式的 CSS 类的名称。</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewContext">
      <summary>获取或设置有关视图的上下文信息。</summary>
      <returns>视图的上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewData">
      <summary>获取当前的视图数据字典。</summary>
      <returns>视图数据字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewDataContainer">
      <summary>获取或设置视图数据容器。</summary>
      <returns>视图数据容器。</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper`1">
      <summary>表示支持在强类型视图中呈现 HTML 控件。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>使用指定的视图上下文和视图数据容器来初始化 <see cref="T:System.Web.Mvc.HtmlHelper`1" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>使用指定的视图上下文、视图数据容器和路由集合来初始化 <see cref="T:System.Web.Mvc.HtmlHelper`1" /> 类的新实例。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="viewDataContainer">视图数据容器。</param>
      <param name="routeCollection">路由集合。</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewData">
      <summary>获取强类型视图数据字典。</summary>
      <returns>强类型视图数据字典。</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpAntiForgeryException">
      <summary>表示一个 HTTP 防伪造异常。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor">
      <summary>通过使用由系统提供的用来描述错误的消息，初始化 <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor(System.String)">
      <summary>通过使用描述错误的指定消息，初始化 <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor(System.String,System.Exception)">
      <summary>通过使用指定的错误消息和对造成此异常的内部异常的引用，初始化 <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpDeleteAttribute">
      <summary>表示一个特性，该特性用于限制操作方法，以便该方法仅处理 HTTP DELETE 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpDeleteAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定请求是否为有效的 HTTP DELETE 请求。</summary>
      <returns>如果请求有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="methodInfo">封装有关方法的信息，例如其类型、返回类型和参数。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProvider">
      <summary>表示要用于来自 HTTP 文件集合的值的值提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.#ctor"></member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="T:System.Web.Mvc.HttpGetAttribute">
      <summary>表示一个特性，该特性用于限制操作方法，以便该方法仅处理 HTTP GET 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpGetAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定请求是否为有效的 HTTP GET 请求。</summary>
      <returns>如果请求有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="methodInfo">封装有关方法的信息，例如其类型、返回类型和参数。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostAttribute">
      <summary>表示一个特性，该特性用于限制操作方法，以便该方法仅处理 HTTP POST 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpPostAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定请求是否为有效的 HTTP POST 请求。</summary>
      <returns>如果请求有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="methodInfo">封装有关方法的信息，例如其类型、返回类型和参数。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostedFileBaseModelBinder">
      <summary>将模型绑定到已发送的文件。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpPostedFileBaseModelBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>绑定模型。</summary>
      <returns>绑定值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="bindingContext">绑定上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个参数或两个参数都是 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpPutAttribute">
      <summary>表示一个特性，该特性用于限制操作方法，以便该方法仅处理 HTTP PUT 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpPutAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>确定请求是否为有效的 HTTP PUT 请求。</summary>
      <returns>如果请求有效，则为 true；否则为 false。</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="methodInfo">封装有关方法的信息，例如其类型、返回类型和参数。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpRequestExtensions">
      <summary>扩展 <see cref="T:System.Web.HttpRequestBase" /> 类，该类包含客户端在 Web 请求中发送的 HTTP 值。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase)">
      <summary>检索客户端使用的 HTTP 数据传输方法重写。</summary>
      <returns>客户端使用的 HTTP 数据传输方法重写。</returns>
      <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 参数为 null。</exception>
      <exception cref="T:System.NotImplementedException">HTTP 数据传输方法重写未实现。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpUnauthorizedResult">
      <summary>表示未经授权的 HTTP 请求的结果。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpVerbs">
      <summary>枚举 HTTP 谓词。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Get">
      <summary>检索由请求的 URI 标识的信息或实体。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Post">
      <summary>发布新实体作为对 URI 的补充。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Put">
      <summary>替换由 URI 标识的实体。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Delete">
      <summary>请求删除指定的 URI。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Head">
      <summary>检索由请求的 URI 标识的信息或实体的消息头。</summary>
    </member>
    <member name="T:System.Web.Mvc.IActionFilter">
      <summary>定义操作筛选器中使用的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>在执行操作方法后调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>在执行操作方法之前调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvoker">
      <summary>定义操作调用程序的协定，该调用程序用于调用一个操作以响应 HTTP 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的控制器上下文来调用指定操作。</summary>
      <returns>如果找到了指定操作，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="T:System.Web.Mvc.IAuthorizationFilter">
      <summary>定义授权筛选器所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IAuthorizationFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在需要授权时调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.IController">
      <summary>定义控制器所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IController.Execute(System.Web.Routing.RequestContext)">
      <summary>执行指定的请求上下文。</summary>
      <param name="requestContext">请求上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerFactory">
      <summary>定义控制器工厂所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>使用指定的请求上下文来创建指定的控制器。</summary>
      <returns>控制器。</returns>
      <param name="requestContext">请求上下文。</param>
      <param name="controllerName">控制器的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>释放指定的控制器。</summary>
      <param name="controller">控制器。</param>
    </member>
    <member name="T:System.Web.Mvc.IExceptionFilter">
      <summary>定义异常筛选器所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>在发生异常时调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinder">
      <summary>定义模型联编程序所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>使用指定的控制器上下文和绑定上下文将模型绑定到一个值。</summary>
      <returns>绑定值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="bindingContext">绑定上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.InputType">
      <summary>枚举输入控件的类型。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.CheckBox">
      <summary>复选框。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Hidden">
      <summary>隐藏字段。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Password">
      <summary>密码框。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Radio">
      <summary>单选按钮。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Text">
      <summary>文本框。</summary>
    </member>
    <member name="T:System.Web.Mvc.IResultFilter">
      <summary>定义结果筛选器所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>在操作结果执行后调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>在操作结果执行之前调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.IRouteWithArea">
      <summary>将路由与 ASP.NET MVC 应用程序中的区域关联。</summary>
    </member>
    <member name="P:System.Web.Mvc.IRouteWithArea.Area">
      <summary>获取要与路由关联的区域的名称。</summary>
      <returns>要与路由关联的区域的名称。</returns>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProvider">
      <summary>定义用于存储在下一个请求中查看的数据的临时数据提供程序的协定。</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>加载临时数据。</summary>
      <returns>临时数据。</returns>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>保存临时数据。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="values">值。</param>
    </member>
    <member name="T:System.Web.Mvc.IValueProvider">
      <summary>定义 ASP.NET MVC 中的值提供程序所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.IValueProvider.GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="T:System.Web.Mvc.IView">
      <summary>定义视图所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>使用指定的编写器对象来呈现指定的视图上下文。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="writer">编写器对象。</param>
    </member>
    <member name="T:System.Web.Mvc.IViewDataContainer">
      <summary>定义视图数据字典所需的方法。</summary>
    </member>
    <member name="P:System.Web.Mvc.IViewDataContainer.ViewData">
      <summary>获取或设置视图数据字典。</summary>
      <returns>视图数据字典。</returns>
    </member>
    <member name="T:System.Web.Mvc.IViewEngine">
      <summary>定义视图引擎所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>使用指定的控制器上下文查找指定的分部视图。</summary>
      <returns>分部视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="useCache">若指定视图引擎返回缓存的视图（如果存在缓存的视图），则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>使用指定的控制器上下文来查找指定的视图。</summary>
      <returns>页视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="viewName">视图的名称。</param>
      <param name="masterName">母版的名称。</param>
      <param name="useCache">若指定视图引擎返回缓存的视图（如果存在缓存的视图），则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>使用指定的控制器上下文来释放指定的视图。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="view">视图。</param>
    </member>
    <member name="T:System.Web.Mvc.IViewLocationCache">
      <summary>定义在内存中缓存视图位置所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>使用指定的 HTTP 上下文和缓存键来获取视图位置。</summary>
      <returns>视图位置。</returns>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="key">缓存键。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>使用指定的 HTTP 上下文和缓存键将指定的视图位置插入到缓存中。</summary>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="key">缓存键。</param>
      <param name="virtualPath">虚拟路径。</param>
    </member>
    <member name="T:System.Web.Mvc.JavaScriptResult">
      <summary>将 JavaScript 内容发送到响应。</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.JavaScriptResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.JavaScriptResult.Script">
      <summary>获取或设置脚本。</summary>
      <returns>脚本。</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonRequestBehavior">
      <summary>指定是否允许来自客户端的 HTTP GET 请求。</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.AllowGet">
      <summary>允许来自客户端的 HTTP GET 请求。</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.DenyGet">
      <summary>不允许来自客户端的 HTTP GET 请求。</summary>
    </member>
    <member name="T:System.Web.Mvc.JsonResult">
      <summary>表示一个类，该类用于将 JSON 格式的内容发送到响应。</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.JsonResult" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentEncoding">
      <summary>获取或设置内容编码。</summary>
      <returns>内容编码。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentType">
      <summary>获取或设置内容的类型。</summary>
      <returns>内容的类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.Data">
      <summary>获取或设置数据。</summary>
      <returns>数据。</returns>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.JsonRequestBehavior">
      <summary>获取或设置一个值，该值指示是否允许来自客户端的 HTTP GET 请求。</summary>
      <returns>一个值，指示是否允许来自客户端的 HTTP GET 请求。</returns>
    </member>
    <member name="T:System.Web.Mvc.LinqBinaryModelBinder">
      <summary>将浏览器请求映射到 LINQ <see cref="T:System.Data.Linq.Binary" /> 对象。</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.LinqBinaryModelBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>使用指定的控制器上下文和绑定上下文来绑定模型。</summary>
      <returns>绑定的数据对象。如果无法绑定模型，此方法将返回 null.</returns>
      <param name="controllerContext">运行控制器的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。</param>
      <param name="bindingContext">绑定模型的上下文。上下文包含模型对象、模型名称、模型类型、属性筛选器和值提供程序等信息。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderAttribute">
      <summary>表示一个特性，该特性用于将模型类型关联到模型-生成器类型。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelBinderAttribute" /> 类的新实例。</summary>
      <param name="binderType">联编程序的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binderType" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderAttribute.BinderType">
      <summary>获取或设置联编程序的类型。</summary>
      <returns>联编程序的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.GetBinder">
      <summary>检索模型联编程序的实例。</summary>
      <returns>对实现 <see cref="T:System.Web.Mvc.IModelBinder" /> 接口的对象的引用。</returns>
      <exception cref="T:System.InvalidOperationException">创建模型联编程序的实例时发生错误。</exception>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderDictionary">
      <summary>表示一个类，该类包含应用程序的所有模型联编程序（按联编程序类型列出）。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelBinderDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>将指定的项添加到模型联编程序字典中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 实例的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Type,System.Web.Mvc.IModelBinder)">
      <summary>使用指定的键将指定的项添加到模型联编程序字典中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Clear">
      <summary>移除模型联编程序字典中的所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>确定模型联编程序字典是否包含指定的值。</summary>
      <returns>如果在模型联编程序字典中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中查找的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.ContainsKey(System.Type)">
      <summary>确定模型联编程序字典是否包含具有指定的键的元素。</summary>
      <returns>如果模型联编程序字典包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder}[],System.Int32)">
      <summary>从指定的索引位置开始，将模型联编程序字典中的元素复制到一个数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中开始复制位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的元素数目大于从 <paramref name="arrayIndex" /> 到目标数组末尾之间的可用空间。 - 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标数组的类型。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Count">
      <summary>获取模型联编程序字典中的元素数。</summary>
      <returns>模型联编程序字典中的元素数。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder">
      <summary>获取或设置默认的模型联编程序。</summary>
      <returns>默认的模型联编程序。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type)">
      <summary>检索指定类型的模型联编程序。</summary>
      <returns>模型联编程序。</returns>
      <param name="modelType">要检索的模型的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type,System.Boolean)">
      <summary>检索指定类型的模型联编程序或检索默认模型联编程序。</summary>
      <returns>模型联编程序。</returns>
      <param name="modelType">要检索的模型的类型。</param>
      <param name="fallbackToDefault">若为 true，则检索默认模型联编程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.IsReadOnly">
      <summary>获取一个值，该值指示模型联编程序字典是否为只读。</summary>
      <returns>如果模型联编程序字典为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Item(System.Type)">
      <summary>获取或设置实现 <see cref="T:System.Web.Mvc.IModelBinder" /> 接口的对象中的指定键。</summary>
      <returns>指定项的键。</returns>
      <param name="key">项键。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Keys">
      <summary>获取包含模型联编程序字典中的键的集合。</summary>
      <returns>一个包含模型联编程序字典中的键的集合。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>从模型联编程序字典中移除指定元素的第一个匹配项。</summary>
      <returns>如果从模型联编程序字典中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在模型联编程序字典中找不到 <paramref name="item" />，则此方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Type)">
      <summary>从模型联编程序字典中移除具有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。如果在模型联编程序字典中找不到 <paramref name="key" />，则此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.TryGetValue(System.Type,System.Web.Mvc.IModelBinder@)">
      <summary>获取与指定的键关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Values">
      <summary>获取包含模型联编程序字典中的值的集合。</summary>
      <returns>一个包含模型联编程序字典中的值的集合。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinders">
      <summary>提供对应用程序的模型联编程序的全局访问。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinders.Binders">
      <summary>获取应用程序的模型联编程序。</summary>
      <returns>应用程序的模型联编程序。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBindingContext">
      <summary>提供运行模型联编程序的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelBindingContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor(System.Web.Mvc.ModelBindingContext)">
      <summary>使用绑定上下文初始化 <see cref="T:System.Web.Mvc.ModelBindingContext" /> 类的新实例。</summary>
      <param name="bindingContext">绑定上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>获取或设置一个值，该值指示联编程序是否应使用空前缀。</summary>
      <returns>如果联编程序应使用空前缀，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.Model">
      <summary>获取或设置模型。</summary>
      <returns>模型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelMetadata">
      <summary>获取或设置模型元数据。</summary>
      <returns>模型元数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelName">
      <summary>获取或设置模型的名称。</summary>
      <returns>模型的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelState">
      <summary>获取或设置模型的状态。</summary>
      <returns>模型的状态。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelType">
      <summary>获取或设置模型的类型。</summary>
      <returns>模型的类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyFilter">
      <summary>获取或设置属性筛选器。</summary>
      <returns>属性筛选器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyMetadata">
      <summary>获取属性元数据。</summary>
      <returns>属性元数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ValueProvider">
      <summary>获取或设置值提供程序。</summary>
      <returns>值提供程序。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRangeRule">
      <summary>为发送到浏览器的范围验证规则提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRangeRule.#ctor(System.String,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelClientValidationRangeRule" /> 类的新实例。</summary>
      <param name="errorMessage">错误消息。</param>
      <param name="minValue">最小值。</param>
      <param name="maxValue">最大值。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRegexRule">
      <summary>为发送到浏览器的正则表达式客户端验证规则提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRegexRule.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelClientValidationRegexRule" /> 类的新实例。</summary>
      <param name="errorMessage">在正则表达式验证失败时要显示的错误消息。</param>
      <param name="pattern">正则表达式。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRequiredRule">
      <summary>为所需字段的客户端验证提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRequiredRule.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> 类的新实例。</summary>
      <param name="errorMessage">当未提供所需字段的值时所显示的错误消息。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRule">
      <summary>为发送到浏览器的客户端验证规则提供基类容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRule.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ErrorMessage">
      <summary>获取或设置客户端验证规则的错误消息。</summary>
      <returns>客户端验证规则的错误消息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationParameters">
      <summary>获取验证参数的列表。</summary>
      <returns>验证参数的列表。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationType">
      <summary>获取或设置验证类型。</summary>
      <returns>验证类型。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationStringLengthRule">
      <summary>为发送到浏览器的字符串长度验证规则提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationStringLengthRule.#ctor(System.String,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelClientValidationStringLengthRule" /> 类的新实例。</summary>
      <param name="errorMessage">验证错误消息。</param>
      <param name="minimumLength">字符串的最小长度。</param>
      <param name="maximumLength">字符串的最大长度。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelError">
      <summary>表示在模型绑定期间发生的错误。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception)">
      <summary>使用指定的异常初始化 <see cref="T:System.Web.Mvc.ModelError" /> 类的新实例。</summary>
      <param name="exception">异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception,System.String)">
      <summary>使用指定的异常和错误消息初始化 <see cref="T:System.Web.Mvc.ModelError" /> 类的新实例。</summary>
      <param name="exception">异常。</param>
      <param name="errorMessage">错误消息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Web.Mvc.ModelError" /> 类的新实例。</summary>
      <param name="errorMessage">错误消息。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelError.ErrorMessage">
      <summary>获取或设置错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelError.Exception">
      <summary>获取或设置异常对象。</summary>
      <returns>异常对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelErrorCollection">
      <summary>
        <see cref="T:System.Web.Mvc.ModelError" /> 实例的集合。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelErrorCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.Exception)">
      <summary>将指定的 <see cref="T:System.Exception" /> 对象添加到模型错误集合中。</summary>
      <param name="exception">异常。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.String)">
      <summary>将指定的错误消息添加到模型错误集合中。</summary>
      <param name="errorMessage">错误消息。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadata">
      <summary>为数据模型的公共元数据、<see cref="T:System.Web.Mvc.ModelMetadataProvider" /> 类和 <see cref="T:System.Web.Mvc.ModelValidator" /> 类提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelMetadata" /> 类的新实例。</summary>
      <param name="provider">提供程序。</param>
      <param name="containerType">容器的类型。</param>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.AdditionalValues">
      <summary>获取包含有关模型的其他元数据的字典。</summary>
      <returns>包含有关模型的其他元数据的字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ContainerType">
      <summary>获取或设置模型的容器的类型。</summary>
      <returns>模型的容器的类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ConvertEmptyStringToNull">
      <summary>获取或设置一个值，该值指示在窗体中回发的空字符串是否应转换为 null。</summary>
      <returns>如果在窗体中回发的空字符串应转换为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DataTypeName">
      <summary>获取或设置有关数据类型的元信息。</summary>
      <returns>有关数据类型的元信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Description">
      <summary>获取或设置模型的说明。</summary>
      <returns>模型的说明。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayFormatString">
      <summary>获取或设置模型的显示格式字符串。</summary>
      <returns>模型的显示格式字符串。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayName">
      <summary>获取或设置模型的显示名称。</summary>
      <returns>模型的显示名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.EditFormatString">
      <summary>获取或设置模型的编辑格式字符串。</summary>
      <returns>模型的编辑格式字符串。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary{``0})">
      <summary>从模型的 <see cref="T:System.Linq.Expressions.Expression" /> 参数中获取元数据。</summary>
      <returns>模型的元数据。</returns>
      <param name="expression">一个标识模型的表达式。</param>
      <param name="viewData">视图数据字典。</param>
      <typeparam name="TParameter">参数的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromStringExpression(System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>从模型的表达式参数中获取元数据。</summary>
      <returns>模型的元数据。</returns>
      <param name="expression">一个标识模型的表达式。</param>
      <param name="viewData">视图数据字典。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetDisplayName">
      <summary>获取模型的显示名称。</summary>
      <returns>模型的显示名称。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetSimpleDisplayText">
      <summary>返回模型的简单说明。</summary>
      <returns>模型的简单说明。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
      <summary>获取模型的验证程序的列表。</summary>
      <returns>模型的验证程序的列表。</returns>
      <param name="context">控制器上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HideSurroundingHtml">
      <summary>获取或设置一个值，该值指示是否应该使用关联的 HTML 元素呈现模型对象。</summary>
      <returns>如果包含模型对象的关联 HTML 元素应包含在该对象中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsComplexType">
      <summary>获取或设置一个值，该值指示模型是否为复杂类型。</summary>
      <returns>一个值，指示 MVC 框架是否将模型视为复杂类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsNullableValueType">
      <summary>获取一个值，该值指示类型是否可以为 null。</summary>
      <returns>如果类型可以为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsReadOnly">
      <summary>获取或设置一个值，该值指示模型是否为只读。</summary>
      <returns>如果模型为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsRequired">
      <summary>获取或设置一个值，该值指示是否需要模型。</summary>
      <returns>如果需要模型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Model">
      <summary>获取模型的值。</summary>
      <returns>模型的值。有关 <see cref="T:System.Web.Mvc.ModelMetadata" /> 的更多信息，请参见 Brad Wilson 博客中的 ASP.NET MVC 2 Templates, Part 2: ModelMetadata（ASP.NET MVC 2 模板，第 2 部分：ModelMetadata）。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ModelType">
      <summary>获取模型的类型。</summary>
      <returns>模型的类型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.NullDisplayText">
      <summary>获取或设置要为 null 值显示的字符串。</summary>
      <returns>要为 null 值显示的字符串。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Properties">
      <summary>获取模型元数据对象的集合，这些对象描述模型的属性。</summary>
      <returns>用于描述模型属性的模型元数据对象的集合。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.PropertyName">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Provider">
      <summary>获取或设置提供程序。</summary>
      <returns>提供程序。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShortDisplayName">
      <summary>获取或设置短显示名称。</summary>
      <returns>短显示名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForDisplay">
      <summary>获取或设置一个值，该值指示属性是否应显示在只读视图（如列表和详细信息视图）中。</summary>
      <returns>如果应在只读视图中显示模型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForEdit">
      <summary>获取或设置一个值，该值指示是否应在可编辑视图中显示模型。</summary>
      <returns>如果应在可编辑视图中显示模型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.SimpleDisplayText">
      <summary>获取或设置模型的简单显示字符串。</summary>
      <returns>模型的简单显示字符串。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.TemplateHint">
      <summary>获取或设置一个提示，该提示建议要为此模型使用哪个模板。</summary>
      <returns>一个提示，建议要为此模型使用哪个模板。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Watermark">
      <summary>获取或设置可用作水印的值。</summary>
      <returns>水印。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProvider">
      <summary>为自定义元数据提供程序提供抽象基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.#ctor">
      <summary>在派生类中重写时，初始化派生自 <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> 类的对象的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>获取模型的每个属性所对应的 <see cref="T:System.Web.Mvc.ModelMetadata" /> 对象。</summary>
      <returns>模型的每个属性所对应的 <see cref="T:System.Web.Mvc.ModelMetadata" /> 对象。</returns>
      <param name="container">容器。</param>
      <param name="containerType">容器的类型。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>获取指定属性的元数据。</summary>
      <returns>指定属性的元数据模型。</returns>
      <param name="modelAccessor">模型访问器。</param>
      <param name="containerType">容器的类型。</param>
      <param name="propertyName">要获取其元数据模型的属性。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>获取指定模型访问器和模型类型的元数据。</summary>
      <returns>元数据。</returns>
      <param name="modelAccessor">模型访问器。</param>
      <param name="modelType">模型的类型。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProviders">
      <summary>为当前的 <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> 实例提供容器。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadataProviders.Current">
      <summary>获取或设置当前的 <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> 对象。</summary>
      <returns>当前的 <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> 对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelState">
      <summary>将模型绑定的状态封装到操作-方法参数的一个属性或操作方法参数本身。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelState.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelState" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Errors">
      <summary>返回一个 <see cref="T:System.Web.Mvc.ModelErrorCollection" /> 对象，该对象包含在模型绑定期间发生的任何错误。</summary>
      <returns>错误。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Value">
      <summary>返回一个 <see cref="T:System.Web.Mvc.ValueProviderResult" /> 对象，该对象封装在模型绑定期间绑定的值。</summary>
      <returns>值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelStateDictionary">
      <summary>表示有关将已发送窗体绑定到操作方法（其中包括验证信息）的尝试的状态。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor(System.Web.Mvc.ModelStateDictionary)">
      <summary>使用从指定的模型状态字典复制的值来初始化 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 类的新实例。</summary>
      <param name="dictionary">模型状态字典。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary " /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>将指定的项添加到模型状态字典中。</summary>
      <param name="item">要添加到模型状态字典中的对象。</param>
      <exception cref="T:System.NotSupportedException">模型状态字典是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.String,System.Web.Mvc.ModelState)">
      <summary>将具有指定的键和值的元素添加到模型状态字典中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">模型状态字典是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">模型状态字典中已存在具有指定键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>将指定的模型错误添加到与指定键关联的模型状态字典的错误集合中。</summary>
      <param name="key">键。</param>
      <param name="exception">异常。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>将指定的错误消息添加到与指定键关联的模型状态字典的错误集合中。</summary>
      <param name="key">键。</param>
      <param name="errorMessage">错误消息。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Clear">
      <summary>移除模型状态字典中的所有项。</summary>
      <exception cref="T:System.NotSupportedException">模型状态字典是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>确定模型状态字典是否包含特定值。</summary>
      <returns>如果在模型状态字典中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在模型状态字典中查找的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.ContainsKey(System.String)">
      <summary>确定模型状态字典是否包含指定的键。</summary>
      <returns>如果模型状态字典包含指定的键，则为 true；否则为 false。</returns>
      <param name="key">要在模型状态字典中查找的键。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}[],System.Int32)">
      <summary>从指定的索引位置开始，将模型状态字典中的元素复制到一个数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象复制的元素的目标的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中开始复制位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源集合中的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 数组末尾处的可用空间。- 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Count">
      <summary>获取集合中键/值对的数目。</summary>
      <returns>集合中键/值对的数目。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsValid">
      <summary>获取一个值，该值指示模型状态字典的此实例是否有效。</summary>
      <returns>如果此实例有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.IsValidField(System.String)">
      <summary>确定是否存在与指定键关联或以指定键为前缀的任何 <see cref="T:System.Web.Mvc.ModelError" /> 对象。</summary>
      <returns>如果模型状态字典包含一个与指定键关联的值，则为 true；否则为 false。</returns>
      <param name="key">键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <returns>模型状态项。</returns>
      <param name="key">键。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Keys">
      <summary>获取包含词典中的键的集合。</summary>
      <returns>一个包含模型状态字典中的键的集合。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Merge(System.Web.Mvc.ModelStateDictionary)">
      <summary>将指定的 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的值复制到此字典中，如果键相同，则覆盖现有值。</summary>
      <param name="dictionary">字典。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>从模型状态字典中移除指定对象的第一个匹配项。</summary>
      <returns>如果从模型状态字典中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在模型状态字典中找不到 <paramref name="item" />，则此方法也会返回 false。</returns>
      <param name="item">要从模型状态字典中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">模型状态字典是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.String)">
      <summary>从模型状态字典中移除具有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。如果在模型状态字典中找不到 <paramref name="key" />，则此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.NotSupportedException">模型状态字典是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.SetModelValue(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>使用指定的值提供程序字典设置指定键的值。</summary>
      <param name="key">键。</param>
      <param name="value">值。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.TryGetValue(System.String,System.Web.Mvc.ModelState@)">
      <summary>尝试获取与指定的键关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Values">
      <summary>获取包含词典中的值的集合。</summary>
      <returns>一个包含模型状态字典中的值的集合。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidationResult">
      <summary>为验证结果提供容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidationResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelValidationResult" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.MemberName">
      <summary>获取或设置成员名。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.Message">
      <summary>获取或设置验证结果消息。</summary>
      <returns>验证结果消息。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidator">
      <summary>提供用于实现验证逻辑的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.Web.Mvc.ModelValidator" /> 类。</summary>
      <param name="metadata">元数据。</param>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.ControllerContext">
      <summary>获取控制器上下文。</summary>
      <returns>控制器上下文。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetClientValidationRules">
      <summary>在派生类中实现时，返回客户端验证的元数据。</summary>
      <returns>客户端验证的元数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.Metadata">
      <summary>获取模型验证程序的元数据。</summary>
      <returns>模型验证程序的元数据。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.Validate(System.Object)">
      <summary>在派生类中实现时验证对象。</summary>
      <returns>验证结果的列表。</returns>
      <param name="container">容器。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProvider">
      <summary>为模型提供验证程序的列表。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.#ctor">
      <summary>在派生类中实现时，初始化 <see cref="T:System.Web.Mvc.ModelValidatorProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>获取验证程序的列表。</summary>
      <returns>验证程序的列表。</returns>
      <param name="metadata">元数据。</param>
      <param name="context">上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviderCollection">
      <summary>为验证提供程序的列表提供一个容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ModelValidatorProvider})">
      <summary>使用模型验证提供程序的列表初始化 <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> 类的新实例。</summary>
      <param name="list">模型验证提供程序的列表。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>返回模型验证程序的列表。</summary>
      <returns>模型验证程序的列表。</returns>
      <param name="metadata">模型元数据。</param>
      <param name="context">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.InsertItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>将模型验证程序提供程序插入到集合中。</summary>
      <param name="index">从零开始的索引，应在该位置插入项。</param>
      <param name="item">要插入的模型验证程序提供程序对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.SetItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>替换指定索引处的模型验证程序提供程序元素。</summary>
      <param name="index">要替换的模型验证程序提供程序元素的从零开始的索引。</param>
      <param name="item">模型验证程序提供程序元素的新值。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviders">
      <summary>为当前验证提供程序提供容器。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidatorProviders.Providers">
      <summary>获取模型验证程序提供程序集合。</summary>
      <returns>模型验证程序提供程序集合。</returns>
    </member>
    <member name="T:System.Web.Mvc.MultiSelectList">
      <summary>表示一个项列表，用户可从该列表中选择多个项。</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable)">
      <summary>使用要包含在列表中的指定项来初始化 <see cref="T:System.Web.Mvc.MultiSelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>使用要包含在列表中的指定项和选定的值来初始化 <see cref="T:System.Web.Mvc.MultiSelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="selectedValues">选定的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>使用要包含在列表中的项、数据值字段和数据文本字段来初始化 <see cref="T:System.Web.Mvc.MultiSelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="dataValueField">数据值字段。</param>
      <param name="dataTextField">数据文本字段。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
      <summary>使用要包含在列表中的项、数据值字段、数据文本字段和选定的值来初始化 <see cref="T:System.Web.Mvc.MultiSelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="dataValueField">数据值字段。</param>
      <param name="dataTextField">数据文本字段。</param>
      <param name="selectedValues">选定的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataTextField">
      <summary>获取或设置数据文本字段。</summary>
      <returns>数据文本字段。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataValueField">
      <summary>获取或设置数据值字段。</summary>
      <returns>数据值字段。</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.Items">
      <summary>获取或设置列表中的项。</summary>
      <returns>列表中的项。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.SelectedValues">
      <summary>获取或设置选定的值。</summary>
      <returns>选定的值。</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHandler">
      <summary>选择将处理 HTTP 请求的控制器。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.#ctor(System.Web.Routing.RequestContext)">
      <summary>初始化 <see cref="T:System.Web.Mvc.MvcHandler" /> 类的新实例。</summary>
      <param name="requestContext">请求上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.AddVersionHeader(System.Web.HttpContextBase)">
      <summary>使用指定的 HTTP 上下文来添加版本标头。</summary>
      <param name="httpContext">HTTP 上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以开始对请求进行异步处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">异步对象的状态。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以使用基 HTTP 上下文开始异步请求处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">异步对象的状态。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.DisableMvcResponseHeader">
      <summary>获取或设置一个值，该值指示是否禁用 MVC 响应标头。</summary>
      <returns>如果禁用 MVC 响应标头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>在异步请求处理已结束时由 ASP.NET 调用。</summary>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.IsReusable">
      <summary>获取一个值，该值指示其他请求能否使用 <see cref="T:System.Web.IHttpHandler" /> 实例。</summary>
      <returns>如果 <see cref="T:System.Web.IHttpHandler" /> 实例可再次使用，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Web.Mvc.MvcHandler.MvcVersionHeaderName">
      <summary>包含 ASP.NET MVC 版本的标头名称。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>使用指定的 HTTP 请求上下文来处理请求。</summary>
      <param name="httpContext">HTTP 上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary>使用指定的基 HTTP 请求上下文来处理请求。</summary>
      <param name="httpContext">HTTP 上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.RequestContext">
      <summary>获取请求上下文。</summary>
      <returns>请求上下文。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以使用基 HTTP 上下文开始异步请求处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="context">HTTP 上下文。</param>
      <param name="cb">异步回调方法。</param>
      <param name="extraData">数据。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>在异步请求处理已结束时由 ASP.NET 调用。</summary>
      <param name="result">异步结果。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#IsReusable">
      <summary>获取一个值，该值指示其他请求能否使用 <see cref="T:System.Web.IHttpHandler" /> 实例。</summary>
      <returns>如果 <see cref="T:System.Web.IHttpHandler" /> 实例可再次使用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>通过实现 <see cref="T:System.Web.IHttpHandler" /> 接口的自定义 HTTP 处理程序启用 HTTP Web 请求的处理。</summary>
      <param name="httpContext">一个 <see cref="T:System.Web.HttpContext" /> 对象，它提供对用于为 HTTP 请求提供服务的内部服务器对象（如 Request、Response、Session 和 Server）的引用。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHtmlString">
      <summary>表示不应再次进行编码的 HTML 编码的字符串。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.MvcHtmlString" /> 类的新实例。</summary>
      <param name="value">要创建的字符串。如果未分配任何值，则使用空字符串值创建对象。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.Create(System.String)">
      <summary>使用指定文本值创建 HTML 编码的字符串。</summary>
      <returns>HTML 编码的字符串。</returns>
      <param name="value">要创建的字符串的值。</param>
    </member>
    <member name="F:System.Web.Mvc.MvcHtmlString.Empty">
      <summary>包含空 HTML 字符串。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.IsNullOrEmpty(System.Web.Mvc.MvcHtmlString)">
      <summary>确定指定的字符串包含内容还是为 null 或为空。</summary>
      <returns>如果字符串为 null 或为空，则为 true；否则为 false。</returns>
      <param name="value">字符串。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.ToHtmlString">
      <summary>返回表示当前对象的 HTML 编码的字符串。</summary>
      <returns>表示当前对象的 HTML 编码的字符串。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHttpHandler">
      <summary>验证并处理 HTTP 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.MvcHttpHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以开始对请求进行异步处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="httpContext">HTTP 上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以开始对请求进行异步处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="httpContext">基 HTTP 上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>在异步请求处理已结束时由 ASP.NET 调用。</summary>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>由 ASP.NET 调用以开始对请求进行异步处理。</summary>
      <returns>异步调用的状态。</returns>
      <param name="context">上下文。</param>
      <param name="cb">异步回调方法。</param>
      <param name="extraData">包含数据的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>在异步请求处理已结束时由 ASP.NET 调用。</summary>
      <param name="result">异步操作的状态。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.VerifyAndProcessRequest(System.Web.IHttpHandler,System.Web.HttpContextBase)">
      <summary>验证并处理 HTTP 请求。</summary>
      <param name="httpHandler">HTTP 处理程序。</param>
      <param name="httpContext">HTTP 上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcRouteHandler">
      <summary>创建用于实现 IHttpHandler 接口的对象并为其提供请求上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.MvcRouteHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>使用指定的 HTTP 上下文检索 HTTP 处理程序。</summary>
      <returns>HTTP 处理程序。</returns>
      <param name="requestContext">请求上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>使用指定的请求上下文检索 HTTP 处理程序。</summary>
      <returns>HTTP 处理程序。</returns>
      <param name="requestContext">请求上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionExtensions">
      <summary>扩展 NameValueCollection 对象，以便能够将集合复制到指定字典。</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将指定集合复制到指定的目标。</summary>
      <param name="collection">集合。</param>
      <param name="destination">目标。</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>将指定集合复制到指定的目标，并可选择替换以前的条目。</summary>
      <param name="collection">集合。</param>
      <param name="destination">目标。</param>
      <param name="replaceEntries">若替换以前的条目，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionValueProvider">
      <summary>表示值提供程序的基类，这些值提供程序的值来自 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor"></member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetCulture(System.Web.Mvc.ControllerContext)"></member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetNameValueCollection(System.Web.Mvc.ControllerContext)"></member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="T:System.Web.Mvc.NoAsyncTimeoutAttribute">
      <summary>为 <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> 特性提供便利包装。</summary>
    </member>
    <member name="M:System.Web.Mvc.NoAsyncTimeoutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.NoAsyncTimeoutAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Web.Mvc.NonActionAttribute">
      <summary>表示一个特性，该特性用于指示控制器方法不是操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.NonActionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>使用指定的控制器上下文确定该特性是否标记一个不是操作方法的方法。</summary>
      <returns>如果该特性标记一个有效的非操作方法，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="methodInfo">方法信息。</param>
    </member>
    <member name="T:System.Web.Mvc.OutputCacheAttribute">
      <summary>表示一个特性，该特性用于标记将缓存其输出的操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.OutputCacheAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.CacheProfile">
      <summary>获取或设置缓存配置文件名称。</summary>
      <returns>缓存配置文件名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Duration">
      <summary>获取或设置缓存持续时间。</summary>
      <returns>缓存持续时间。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Location">
      <summary>获取或设置位置。</summary>
      <returns>位置。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.NoStore">
      <summary>获取或设置一个值，该值指示是否存储缓存。</summary>
      <returns>如果应存储缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>在操作结果执行之前调用。</summary>
      <param name="filterContext">筛选器上下文，它封装用于 <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.SqlDependency">
      <summary>获取或设置 SQL 依赖项。</summary>
      <returns>SQL 依赖项。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByContentEncoding">
      <summary>获取或设置基于内容变化的编码。</summary>
      <returns>基于内容变化的编码。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByCustom">
      <summary>获取或设置基于自定义项变化的值。</summary>
      <returns>基于自定义项变化的值。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByHeader">
      <summary>获取或设置基于标头变化的值。</summary>
      <returns>基于标头变化的值。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByParam">
      <summary>获取或设置基于参数变化的值。</summary>
      <returns>基于参数变化的值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterBindingInfo">
      <summary>封装与将操作-方法参数绑定到数据模型相关的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterBindingInfo.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ParameterBindingInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Binder">
      <summary>获取模型联编程序。</summary>
      <returns>模型联编程序。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Exclude">
      <summary>获取为其禁用绑定的属性名称的列表（各属性名称之间用逗号分隔）。</summary>
      <returns>排除列表。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Include">
      <summary>获取为其启用绑定的属性名称的列表（各属性名称之间用逗号分隔）。</summary>
      <returns>包含列表。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Prefix">
      <summary>获取在 MVC 框架将一个值绑定到操作参数或模型属性时要使用的前缀。</summary>
      <returns>前缀。</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterDescriptor">
      <summary>包含描述参数的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ParameterDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor">
      <summary>获取操作描述符。</summary>
      <returns>操作描述符。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.BindingInfo">
      <summary>获取绑定信息。</summary>
      <returns>绑定信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.DefaultValue">
      <summary>获取参数的默认值。</summary>
      <returns>参数的默认值。</returns>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组（按类型标识）。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否为此成员定义某个自定义特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义了自定义特性类型，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterName">
      <summary>获取参数名。</summary>
      <returns>参数名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterType">
      <summary>获取参数的类型。</summary>
      <returns>参数的类型。</returns>
    </member>
    <member name="T:System.Web.Mvc.PartialViewResult">
      <summary>表示一个用于将分部视图发送到响应的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.PartialViewResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>返回用于呈现视图的 <see cref="T:System.Web.Mvc.ViewEngineResult" /> 对象。</summary>
      <returns>视图引擎结果。</returns>
      <param name="context">控制器上下文。</param>
      <exception cref="T:System.InvalidOperationException">方法尝试查找视图时发生错误。</exception>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProvider">
      <summary>表示 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象中包含的查询字符串的值提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProvider.#ctor"></member>
    <member name="T:System.Web.Mvc.RedirectResult">
      <summary>通过重定向到指定的 URI 来控制对应用程序操作的处理。</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.RedirectResult" /> 类的新实例。</summary>
      <param name="url">目标 URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Url">
      <summary>获取或设置目标 URL。</summary>
      <returns>目标 URL。</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectToRouteResult">
      <summary>表示使用指定的路由值字典来执行重定向的结果。</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定的路由名称和路由值来初始化 <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> 类的新实例。</summary>
      <param name="routeName">路由的名称。</param>
      <param name="routeValues">路由值。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定的路由值初始化 <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> 类的新实例。</summary>
      <param name="routeValues">路由值。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>通过从 <see cref="T:System.Web.Mvc.ActionResult" /> 类继承的自定义类型，启用对操作方法结果的处理。</summary>
      <param name="context">执行结果时所处的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteName">
      <summary>获取或设置路由的名称。</summary>
      <returns>路由的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteValues">
      <summary>获取或设置路由值。</summary>
      <returns>路由值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedActionDescriptor">
      <summary>包含描述反射的操作方法的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ReflectedActionDescriptor" /> 类的新实例。</summary>
      <param name="methodInfo">操作-方法信息。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerDescriptor">控制器描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> 或 <paramref name="controllerDescriptor" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或空。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ActionName">
      <summary>获取操作的名称。</summary>
      <returns>操作的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ControllerDescriptor">
      <summary>获取控制器描述符。</summary>
      <returns>控制器描述符。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的操作-方法参数来执行指定的控制器上下文。</summary>
      <returns>操作返回值。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameters">参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> 或 <paramref name="controllerContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员（由类型标识）定义的自定义特性的数组。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetFilters">
      <summary>检索有关操作筛选器的信息。</summary>
      <returns>筛选器信息。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetParameters">
      <summary>检索操作方法的参数。</summary>
      <returns>操作方法的参数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetSelectors">
      <summary>检索操作选择器。</summary>
      <returns>操作选择器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否为此成员定义某个自定义特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义了自定义特性类型，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.MethodInfo">
      <summary>获取或设置操作-方法信息。</summary>
      <returns>操作-方法信息。</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedControllerDescriptor">
      <summary>包含描述反射的控制器的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ReflectedControllerDescriptor" /> 类的新实例。</summary>
      <param name="controllerType">控制器的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerType" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedControllerDescriptor.ControllerType">
      <summary>获取控制器的类型。</summary>
      <returns>控制器的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>查找指定的控制器上下文的指定操作。</summary>
      <returns>有关操作的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCanonicalActions">
      <summary>返回控制器的操作的列表。</summary>
      <returns>控制器的操作描述符的列表。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组（按类型标识）。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>返回一个值，该值指示是否为此成员定义某个自定义特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义了自定义特性类型，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Web.Mvc.ReflectedParameterDescriptor">
      <summary>包含描述反射的操作-方法参数的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.#ctor(System.Reflection.ParameterInfo,System.Web.Mvc.ActionDescriptor)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ReflectedParameterDescriptor" /> 类的新实例。</summary>
      <param name="parameterInfo">参数信息。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameterInfo" /> 或 <paramref name="actionDescriptor" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ActionDescriptor">
      <summary>获取操作描述符。</summary>
      <returns>操作描述符。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.BindingInfo">
      <summary>获取绑定信息。</summary>
      <returns>绑定信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.DefaultValue">
      <summary>获取反射的参数的默认值。</summary>
      <returns>反射的参数的默认值。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组（按类型标识）。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">为此成员定义的 <paramref name="attributeType" /> 类型特性不止一个。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>返回一个值，该值指示是否为此成员定义某个自定义特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义了自定义特性类型，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterInfo">
      <summary>获取或设置参数信息。</summary>
      <returns>参数信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterName">
      <summary>获取参数名。</summary>
      <returns>参数名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterType">
      <summary>获取参数的类型。</summary>
      <returns>参数的类型。</returns>
    </member>
    <member name="T:System.Web.Mvc.RequireHttpsAttribute">
      <summary>表示一个特性，该特性用于强制通过 HTTPS 重新发送不安全的 HTTP 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>处理发送给操作方法的不安全的 HTTP 请求。</summary>
      <param name="filterContext">一个对象，该对象封装为了使用 <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> 特性所必需的信息。</param>
      <exception cref="T:System.InvalidOperationException">HTTP 请求包含无效的传输方法重写。所有 GET 请求都被视为无效。</exception>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>确定请求是否安全 (HTTPS)，如果不安全，则调用 <see cref="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)" /> 方法。</summary>
      <param name="filterContext">一个对象，该对象封装为了使用 <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> 特性所必需的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutedContext">
      <summary>提供 <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> 方法的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ResultExecutedContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,System.Boolean,System.Exception)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ResultExecutedContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="result">结果对象。</param>
      <param name="canceled">若取消执行，则为 true；否则为 false。</param>
      <param name="exception">异常对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Canceled">
      <summary>获取或设置一个值，该值指示是否取消此 <see cref="T:System.Web.Mvc.ResultExecutedContext" /> 实例。</summary>
      <returns>如果取消实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Exception">
      <summary>获取或设置异常对象。</summary>
      <returns>异常对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.ExceptionHandled">
      <summary>获取或设置一个值，该值指示是否已处理异常。</summary>
      <returns>如果已处理异常，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Result">
      <summary>获取或设置操作结果。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutingContext">
      <summary>提供 <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> 类的 <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> 方法的上下文。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ResultExecutingContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>使用指定的控制器上下文和操作结果来初始化 <see cref="T:System.Web.Mvc.ResultExecutingContext" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="result">操作结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Cancel">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Web.Mvc.ResultExecutingContext" /> 值是否为“cancel”。</summary>
      <returns>如果该值为“cancel”，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Result">
      <summary>获取或设置操作结果。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionExtensions">
      <summary>扩展 <see cref="T:System.Web.Routing.RouteCollection" /> 对象以进行 MVC 路由。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>返回一个包含有关路由和虚拟路径的信息的对象，这些信息是在当前区域中生成 URL 时产生的。</summary>
      <returns>一个包含有关路由和虚拟路径的信息的对象，这些信息是在当前区域中生成 URL 时产生的。</returns>
      <param name="routes">一个包含应用程序的路由的对象。</param>
      <param name="requestContext">一个对象，封装有关所请求的路由的信息。</param>
      <param name="name">要在检索 URL 路径相关信息时使用的路由的名称。</param>
      <param name="values">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>返回一个包含有关路由和虚拟路径的信息的对象，这些信息是在当前区域中生成 URL 时产生的。</summary>
      <returns>一个包含有关路由和虚拟路径的信息的对象，这些信息是在当前区域中生成 URL 时产生的。</returns>
      <param name="routes">一个包含应用程序的路由的对象。</param>
      <param name="requestContext">一个对象，封装有关所请求的路由的信息。</param>
      <param name="values">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String)">
      <summary>忽略给定可用路由列表的指定 URL 路由。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="url">要忽略的路由的 URL 模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String,System.Object)">
      <summary>忽略给定可用路由列表和约束列表的指定 URL 路由。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="url">要忽略的路由的 URL 模式。</param>
      <param name="constraints">一组表达式，用于指定 <paramref name="url" /> 参数的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>映射指定的 URL 路由。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>映射指定的 URL 路由并设置默认路由值。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>映射指定的 URL 路由并设置默认路由值和约束。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="constraints">一组表达式，用于指定 <paramref name="url" /> 参数的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>映射指定的 URL 路由并设置默认的路由值、约束和命名空间。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="constraints">一组表达式，用于指定 <paramref name="url" /> 参数的值。</param>
      <param name="namespaces">应用程序的命名空间集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
      <summary>映射指定的 URL 路由并设置默认的路由值和命名空间。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="defaults">一个包含默认路由值的对象。</param>
      <param name="namespaces">应用程序的命名空间集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.String[])">
      <summary>映射指定的 URL 路由并设置命名空间。</summary>
      <returns>对映射路由的引用。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="name">要映射的路由的名称。</param>
      <param name="url">路由的 URL 模式。</param>
      <param name="namespaces">应用程序的命名空间集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> 或 <paramref name="url" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProvider">
      <summary>表示实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 接口的对象中包含的路由数据的值提供程序。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProvider.#ctor"></member>
    <member name="T:System.Web.Mvc.SelectList">
      <summary>表示一个列表，用户可从该列表中选择一个项。</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable)">
      <summary>使用列表的指定项来初始化 <see cref="T:System.Web.Mvc.SelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
      <summary>使用列表的指定项和选定的值来初始化 <see cref="T:System.Web.Mvc.SelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="selectedValue">选定的值。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>使用列表的指定项、数据值字段和数据文本字段来初始化 <see cref="T:System.Web.Mvc.SelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="dataValueField">数据值字段。</param>
      <param name="dataTextField">数据文本字段。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
      <summary>使用列表的指定项、数据值字段、数据文本字段和选定的值来初始化 <see cref="T:System.Web.Mvc.SelectList" /> 类的新实例。</summary>
      <param name="items">各个项。</param>
      <param name="dataValueField">数据值字段。</param>
      <param name="dataTextField">数据文本字段。</param>
      <param name="selectedValue">选定的值。</param>
    </member>
    <member name="P:System.Web.Mvc.SelectList.SelectedValue">
      <summary>获取或设置选定的值。</summary>
      <returns>选定的值。</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectListItem">
      <summary>表示 <see cref="T:System.Web.Mvc.SelectList" /> 类的实例中的选定项。</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListItem.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.SelectListItem" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Selected">
      <summary>获取或设置一个值，该值指示是否选择此 <see cref="T:System.Web.Mvc.SelectListItem" />。</summary>
      <returns>如果选定此项，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Text">
      <summary>获取或设置选定项的文本。</summary>
      <returns>文本。</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Value">
      <summary>获取或设置选定项的值。</summary>
      <returns>值。</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateTempDataProvider">
      <summary>为当前 <see cref="T:System.Web.Mvc.TempDataDictionary" /> 对象提供会话状态数据。</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.SessionStateTempDataProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>使用指定的控制器上下文来加载临时数据。</summary>
      <returns>临时数据。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <exception cref="T:System.InvalidOperationException">在检索会话上下文时发生错误。</exception>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的控制器上下文将指定的值保存在临时数据字典中。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="values">值。</param>
      <exception cref="T:System.InvalidOperationException">在检索会话上下文时发生错误。</exception>
    </member>
    <member name="T:System.Web.Mvc.TagBuilder">
      <summary>表示一个类，HTML 帮助器使用该类生成 HTML 元素。</summary>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Mvc.TagBuilder" /> 类的新实例。</summary>
      <param name="tagName">该标记的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.AddCssClass(System.String)">
      <summary>向标记生成器特性添加指定 CSS 类。</summary>
      <param name="value">CSS 类值字符串。</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.Attributes">
      <summary>获取或设置标记的特性集合。</summary>
      <returns>标记的特性集合。</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.GenerateId(System.String)">
      <summary>使用指定名称为标记生成 id 特性。</summary>
      <param name="name">用于生成 id 值的名称。</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.IdAttributeDotReplacement">
      <summary>获取或设置用于替换 id 特性中的句号（点）的字符。</summary>
      <returns>用于替换 id 特性中的句号（点）的字符。</returns>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.InnerHtml">
      <summary>获取或设置标记（元素）的内部 HTML。</summary>
      <returns>标记（元素）的内部 HTML。</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttribute(System.String,System.String)">
      <summary>使用指定键/值对向标记添加特性。</summary>
      <param name="key">键。</param>
      <param name="value">值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttribute(System.String,System.String,System.Boolean)">
      <summary>使用指定键/值对向标记添加特性。</summary>
      <param name="key">键。</param>
      <param name="value">值。</param>
      <param name="replaceExisting">如果为 true，则替换现有特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1})">
      <summary>向标记的指定特性集合添加特性。</summary>
      <param name="attributes">特性。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
      <summary>向标记的指定特性集合添加特性。</summary>
      <param name="attributes">特性。</param>
      <param name="replaceExisting">如果为 true，则替换现有特性。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.SetInnerText(System.String)">
      <summary>设置标记（元素）的内部文本。</summary>
      <param name="innerText">标记（元素）的内部文本。</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.TagName">
      <summary>获取或设置标记名称。</summary>
      <returns>该标记的名称。</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.ToString(System.Web.Mvc.TagRenderMode)">
      <summary>使用指定的标记呈现模式返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
      <param name="renderMode">标记呈现模式。</param>
    </member>
    <member name="T:System.Web.Mvc.TagRenderMode">
      <summary>枚举可用于呈现 HTML 标记的模式。</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.Normal">
      <summary>表示正常模式。</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.StartTag">
      <summary>表示开始标记模式。</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.EndTag">
      <summary>表示结束标记模式。</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.SelfClosing">
      <summary>表示自结束标记模式。</summary>
    </member>
    <member name="T:System.Web.Mvc.TempDataDictionary">
      <summary>表示仅从一个请求保持到下一个请求的数据集。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.TempDataDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Web.Mvc.TempDataDictionary" /> 类的新实例。</summary>
      <param name="info">信息。</param>
      <param name="context">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Add(System.String,System.Object)">
      <summary>将具有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 实例中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsValue(System.Object)">
      <summary>确定字典是否包含指定的值。</summary>
      <returns>如果字典包含指定的值，则为 true；否则为 false。</returns>
      <param name="value">值。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetEnumerator">
      <summary>获取枚举器。</summary>
      <returns>枚举器。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类。</summary>
      <param name="info">要使用数据填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。有关更多信息，请参见<see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Item(System.String)">
      <summary>获取或设置具有指定键的对象。</summary>
      <returns>具有指定键的对象。</returns>
      <param name="key">要访问的键。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep">
      <summary>将字典中的所有键都标记为需保留。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep(System.String)">
      <summary>将字典中的指定键标记为需保留。</summary>
      <param name="key">字典中要保留的键。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Keys">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，该对象包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中元素的键。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中元素的键。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Load(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>使用指定的数据提供程序加载指定的控制器上下文。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="tempDataProvider">临时数据提供程序。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Remove(System.String)">
      <summary>从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中移除具有指定键的元素。</summary>
      <returns>如果已成功移除该元素，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。实例发生冲突。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Save(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>使用指定的数据提供程序保存指定的控制器上下文。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="tempDataProvider">临时数据提供程序。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定的键/值对添加到字典中。</summary>
      <param name="keyValuePair">键/值对。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>通过使用默认的相等比较器确定序列是否包含指定的元素。</summary>
      <returns>如果字典包含指定的键/值对，则为 true；否则为 false。</returns>
      <param name="keyValuePair">要搜索的键/值对。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>将一个键/值对复制到指定数组的指定索引处。</summary>
      <param name="array">目标数组。</param>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示字典是否为只读。</summary>
      <returns>如果字典是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从字典中删除指定的键/值对。</summary>
      <returns>如果已成功移除键/值对，则为 true；否则为 false。</returns>
      <param name="keyValuePair">键/值对。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">要使用数据填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。有关更多信息，请参见<see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>获取具有指定键的元素的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，该对象包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中的值。</summary>
      <returns>实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的元素的值。</returns>
    </member>
    <member name="T:System.Web.Mvc.TemplateInfo">
      <summary>封装有关当前模板上下文的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.TemplateInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.FormattedModelValue">
      <summary>获取或设置格式化的模型值。</summary>
      <returns>格式化的模型值。</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldId(System.String)">
      <summary>使用指定的 HTML name 特性检索字段的完整 DOM ID。</summary>
      <returns>完整 DOM ID。</returns>
      <param name="partialFieldName">HTML name 特性的值。</param>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldName(System.String)">
      <summary>使用指定的 HTML name 特性检索字段的完全限定名（包括前缀）。</summary>
      <returns>字段的前缀名称。</returns>
      <param name="partialFieldName">HTML name 特性的值。</param>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.HtmlFieldPrefix">
      <summary>获取或设置 HTML 字段前缀。</summary>
      <returns>HTML 字段前缀。</returns>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.TemplateDepth">
      <summary>包含用户访问的对象的数目。</summary>
      <returns>对象的数目。</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.Visited(System.Web.Mvc.ModelMetadata)">
      <summary>确定用户是否访问了模板。</summary>
      <returns>如果用户访问了模板，则为 true；否则为 false。</returns>
      <param name="metadata">一个对象，该对象封装用于描述模型的信息。</param>
    </member>
    <member name="T:System.Web.Mvc.UrlHelper">
      <summary>包含用于为应用程序内的 ASP.NET MVC 生成 URL 的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext)">
      <summary>使用指定的请求上下文初始化 <see cref="T:System.Web.Mvc.UrlHelper" /> 类的新实例。</summary>
      <param name="requestContext">一个对象，该对象包含有关当前请求以及与当前请求匹配的路由的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection)">
      <summary>使用指定的请求上下文和路由集合初始化 <see cref="T:System.Web.Mvc.UrlHelper" /> 类的新实例。</summary>
      <param name="requestContext">一个对象，该对象包含有关当前请求以及与当前请求匹配的路由的信息。</param>
      <param name="routeCollection">路由集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 或 <paramref name="routeCollection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String)">
      <summary>使用指定的操作名称生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Object)">
      <summary>使用指定的操作名称和路由值生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String)">
      <summary>使用指定的操作名称和控制器名称生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object)">
      <summary>使用指定的操作名称、控制器名称和路由值生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String)">
      <summary>使用指定的操作名称、控制器名称、路由值和要使用的协议生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定的操作名称、控制器名称和路由值生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>使用指定的操作名称、控制器名称、路由值、要使用的协议和主机名生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>为指定的操作名称和路由值生成操作方法的完全限定 URL。</summary>
      <returns>操作方法的完全限定 URL。</returns>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Content(System.String)">
      <summary>将虚拟（相对）路径转换为应用程序绝对路径。</summary>
      <returns>应用程序绝对路径。</returns>
      <param name="contentPath">内容的虚拟路径。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Encode(System.String)">
      <summary>将 URL 字符串中的特殊字符编码为字符-实体等效项。</summary>
      <returns>一个已编码的 URL 字符串。</returns>
      <param name="url">要编码的文本。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateContentUrl(System.String,System.Web.HttpContextBase)">
      <summary>返回一个包含内容 URL 的字符串。</summary>
      <returns>一个包含内容 URL 的字符串。</returns>
      <param name="contentPath">内容路径。</param>
      <param name="httpContext">HTTP 上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>返回一个包含 URL 的字符串。</summary>
      <returns>一个字符串，其中包含 URL。</returns>
      <param name="routeName">路由名称。</param>
      <param name="actionName">操作名称。</param>
      <param name="controllerName">控制器名称。</param>
      <param name="protocol">HTTP 协议。</param>
      <param name="hostName">主机名。</param>
      <param name="fragment">片段。</param>
      <param name="routeValues">路由值。</param>
      <param name="routeCollection">路由集合。</param>
      <param name="requestContext">请求上下文。</param>
      <param name="includeImplicitMvcValues">true 表示包含隐式 MVC 值；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>返回一个包含 URL 的字符串。</summary>
      <returns>一个字符串，其中包含 URL。</returns>
      <param name="routeName">路由名称。</param>
      <param name="actionName">操作名称。</param>
      <param name="controllerName">控制器名称。</param>
      <param name="routeValues">路由值。</param>
      <param name="routeCollection">路由集合。</param>
      <param name="requestContext">请求上下文。</param>
      <param name="includeImplicitMvcValues">true 表示包含隐式 MVC 值；否则不包括。false.</param>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RequestContext">
      <summary>获取有关与所定义路由匹配的 HTTP 请求的信息。</summary>
      <returns>请求上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RouteCollection">
      <summary>获取一个集合，该集合包含为应用程序注册的路由。</summary>
      <returns>路由集合。</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Object)">
      <summary>为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String)">
      <summary>为指定的路由名称生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeName">用于生成 URL 的路由的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object)">
      <summary>使用路由名称为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeName">用于生成 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String)">
      <summary>使用路由名称和要使用的协议为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeName">用于生成 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用路由名称为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeName">用于生成 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>使用指定的路由名称、要使用的协议和主机名为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeName">用于生成 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Web.Routing.RouteValueDictionary)">
      <summary>为指定的路由值生成完全限定 URL。</summary>
      <returns>完全限定 URL。</returns>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="T:System.Web.Mvc.UrlParameter">
      <summary>表示一个可选参数，<see cref="T:System.Web.Mvc.MvcHandler" /> 类在路由期间会用到它。</summary>
    </member>
    <member name="F:System.Web.Mvc.UrlParameter.Optional">
      <summary>包含该可选参数的只读值。</summary>
    </member>
    <member name="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute">
      <summary>表示一个特性，该特性用于检测服务器请求是否已被篡改。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在需要授权时调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.Salt">
      <summary>获取或设置 salt 字符串。</summary>
      <returns>salt 字符串。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidateInputAttribute">
      <summary>表示一个特性，该特性用于标记必须验证其输入的操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValidateInputAttribute" /> 类的新实例。</summary>
      <param name="enableValidation">若启用验证，则为 true。</param>
    </member>
    <member name="P:System.Web.Mvc.ValidateInputAttribute.EnableValidation">
      <summary>获取或设置一个值，该值指示是否启用验证。</summary>
      <returns>如果启用验证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>在需要授权时调用。</summary>
      <param name="filterContext">筛选器上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderCollection">
      <summary>表示应用程序的值提供程序对象的集合。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValueProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IValueProvider})">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValueProviderCollection" /> 类的新实例并注册指定的值提供程序。</summary>
      <param name="list">要注册的值提供程序的列表。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>将指定的值提供程序对象插入集合中的指定索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入值提供程序。</param>
      <param name="item">要插入的值提供程序对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.SetItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>将指定索引位置处的值提供程序替换为新的值提供程序。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderDictionary">
      <summary>表示应用程序的值提供程序的字典。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValueProviderDictionary" /> 类的新实例。</summary>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>将指定的项添加到值提供程序的集合。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Object)">
      <summary>将具有指定的键和值的元素添加到值提供程序的集合中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中已存在具有指定键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>将具有指定的键和值的元素添加到值提供程序的集合中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中已存在具有指定键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Clear">
      <summary>从值提供程序的集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>确定值提供程序的集合是否包含指定的项。</summary>
      <returns>如果在值提供程序的集合中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 实例中查找的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.ContainsKey(System.String)">
      <summary>确定值提供程序的集合是否包含具有指定键的元素。</summary>
      <returns>如果值提供程序的集合包含具有该键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例中查找的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.ControllerContext">
      <summary>获取或设置控制器上下文。</summary>
      <returns>控制器上下文。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult}[],System.Int32)">
      <summary>从指定索引处开始，将集合中的元素复制到一个数组。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象复制的元素的目标的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中开始复制位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维数组。- 或 -<paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源集合中的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 数组末尾处的可用空间。- 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标数组的类型。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Item(System.String)">
      <summary>获取或设置具有指定键的 <see cref="T:System.Web.Mvc.ValueProviderResult" /> 对象。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ValueProviderResult" /> 对象。</returns>
      <param name="key">键。</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Keys">
      <summary>获取一个包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例的键的集合。</summary>
      <returns>一个包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 接口的对象的键的集合。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>从值提供程序的集合中移除指定项的第一个匹配项。</summary>
      <returns>如果从集合中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在集合中找不到 <paramref name="item" />，则此方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 实例中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.String)">
      <summary>从值提供程序的集合中移除具有指定键的元素。</summary>
      <returns>如果已成功移除该元素，则为 true；否则为 false。如果在该集合中未找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#ContainsPrefix(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#GetValue(System.Web.Mvc.ControllerContext,System.String)"></member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.TryGetValue(System.String,System.Web.Mvc.ValueProviderResult@)">
      <summary>获取具有指定键的元素的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的元素的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Values">
      <summary>获取一个集合，该集合包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中的值。</summary>
      <returns>一个包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 接口的对象中的值的集合。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderResult">
      <summary>表示将一个值（如窗体发布或查询字符串中的值）绑定到操作-方法参数属性，或者绑定到该参数本身的结果。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ValueProviderResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的原始值、尝试的值和区域性信息初始化 <see cref="T:System.Web.Mvc.ValueProviderResult" /> 类的新实例。</summary>
      <param name="rawValue">原始值。</param>
      <param name="attemptedValue">尝试的值。</param>
      <param name="culture">区域性。</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.AttemptedValue">
      <summary>获取或设置要转换为字符串，以便显示的原始值。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type)">
      <summary>将此结果封装的值转换为指定的类型。</summary>
      <returns>转换后的值。</returns>
      <param name="type">目标类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性信息将此结果封装的值转换为指定的类型。</summary>
      <returns>转换后的值。</returns>
      <param name="type">目标类型。</param>
      <param name="culture">要在转换中使用的区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.Culture">
      <summary>获取或设置区域性。</summary>
      <returns>区域性。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.RawValue">
      <summary>获取或设置值提供程序所提供的原始值。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviders"></member>
    <member name="P:System.Web.Mvc.ValueProviders.Providers"></member>
    <member name="T:System.Web.Mvc.ViewContext">
      <summary>封装与呈现视图相关的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.IO.TextWriter)">
      <summary>使用指定的控制器上下文、视图、视图数据字典、临时数据字典和文本编写器来初始化 <see cref="T:System.Web.Mvc.ViewContext" /> 类的新实例。</summary>
      <param name="controllerContext">封装有关 HTTP 请求的信息。</param>
      <param name="view">要呈现的视图。</param>
      <param name="viewData">包含呈现视图所需数据的字典。</param>
      <param name="tempData">包含视图的临时数据的字典。</param>
      <param name="writer">用于编写 HTML 输出的文本编写器对象。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ClientValidationEnabled">
      <summary>获取或设置一个值，该值指示是否启用客户端验证。</summary>
      <returns>如果启用客户端验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.FormContext">
      <summary>获取或设置一个对象，该对象对验证和处理 HTML 窗体中的输入数据所需的信息进行封装。</summary>
      <returns>一个对象，该对象对验证和处理 HTML 窗体中的输入数据所需的信息进行封装。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.OutputClientValidation">
      <summary>将客户端验证信息写入 HTTP 响应。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.TempData">
      <summary>获取与此请求关联且仅可用于一个请求的数据。</summary>
      <returns>临时数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.View">
      <summary>获取要在浏览器中呈现的实现了 <see cref="T:System.Web.Mvc.IView" /> 接口的对象。</summary>
      <returns>视图。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewData">
      <summary>获取要传递给视图的视图数据。</summary>
      <returns>视图数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.Writer">
      <summary>获取或设置用于编写 HTML 输出的文本编写器对象。</summary>
      <returns>用于编写 HTML 输出的对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary">
      <summary>表示一个容器，该容器用于在控制器和视图之间传递数据。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Object)">
      <summary>使用指定的模型初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 类的新实例。</summary>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>使用指定的字典初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 类的新实例。</summary>
      <param name="dictionary">字典。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定项添加到集合。</summary>
      <param name="item">要添加到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.String,System.Object)">
      <summary>使用指定键和值将元素添加到集合。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 Null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定集合是否包含指定的项。</summary>
      <returns>如果在集合中找到了 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在集合中定位的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.ContainsKey(System.String)">
      <summary>确定集合是否包含具有指定键的元素。</summary>
      <returns>如果集合包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在集合中查找的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从特定的索引位置开始，将集合的元素复制到一个数组中。</summary>
      <param name="array">作为集合中元素的复制目标位置的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维数组。- 或 -<paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源集合中的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 数组末尾处的可用空间。- 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String)">
      <summary>计算指定表达式的值。</summary>
      <returns>计算的结果。</returns>
      <param name="expression">表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String,System.String)">
      <summary>使用指定格式计算指定的表达式的值。</summary>
      <returns>计算的结果。</returns>
      <param name="expression">表达式。</param>
      <param name="format">格式。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetViewDataInfo(System.String)">
      <summary>返回与 <paramref name="expression" /> 参数定义的视图数据相关的信息。</summary>
      <returns>一个包含由 <paramref name="expression" /> 参数定义的视图数据信息的对象。</returns>
      <param name="expression">一组定义要返回的视图数据信息的键/值对。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Item(System.String)">
      <summary>获取或设置与指定的键关联的项。</summary>
      <returns>所选项的值。</returns>
      <param name="key">键。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Keys">
      <summary>获取包含此字典中的键的集合。</summary>
      <returns>一个集合，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Model">
      <summary>获取或设置与视图数据关联的模型。</summary>
      <returns>与视图数据关联的模型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelMetadata">
      <summary>获取或设置有关模型的信息。</summary>
      <returns>有关模型的信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelState">
      <summary>获取模型的状态。</summary>
      <returns>模型的状态。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从集合中移除指定对象的第一个匹配项。</summary>
      <returns>如果从集合中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在集合中找不到 <paramref name="item" />，则此方法也会返回 false。</returns>
      <param name="item">要从集合中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.String)">
      <summary>使用指定键从集合中移除元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。如果在原始集合中未找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.SetModel(System.Object)">
      <summary>设置要用于视图的数据模型。</summary>
      <param name="value">要用于视图的数据模型。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.TemplateInfo">
      <summary>获取或设置对有关当前模板上下文的信息进行封装的对象。</summary>
      <returns>一个包含有关当前模板的信息的对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>尝试检索与指定的键关联的值。</summary>
      <returns>如果集合包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Values">
      <summary>获取包含此字典中的值的集合。</summary>
      <returns>一个集合，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary`1">
      <summary>表示一个容器，该容器用于在控制器和视图之间传递强类型数据。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>使用指定的视图数据字典初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> 类的新实例。</summary>
      <param name="viewDataDictionary">要复制到此实例中的现有视图数据字典。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(`0)">
      <summary>使用指定的模型初始化 <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> 类的新实例。</summary>
      <param name="model">要用于视图的数据模型。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.Model">
      <summary>获取或设置模型。</summary>
      <returns>对数据模型的引用。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.ModelMetadata">
      <summary>获取或设置有关模型的信息。</summary>
      <returns>有关模型的信息。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.SetModel(System.Object)">
      <summary>设置要用于视图的数据模型。</summary>
      <param name="value">要用于视图的数据模型。</param>
      <exception cref="T:System.InvalidOperationException">在设置模型时发生错误。</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewDataInfo">
      <summary>对开发模板所使用的当前模板内容和与模板交互的 HTML 帮助器的相关信息进行封装。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewDataInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor(System.Func{System.Object})">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewDataInfo" /> 类的新实例，并关联用于访问视图数据信息的委托。</summary>
      <param name="valueAccessor">定义如何访问视图数据信息的委托。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Container">
      <summary>获取或设置包含模板要显示的值的对象。</summary>
      <returns>包含模板要显示的值的对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.PropertyDescriptor">
      <summary>获取或设置模板要显示的属性的描述。</summary>
      <returns>模板要显示的属性的描述。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Value">
      <summary>获取或设置模板要显示的当前值。</summary>
      <returns>模板要显示的当前值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineCollection">
      <summary>表示对应用程序可用的视图引擎的集合。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewEngineCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IViewEngine})">
      <summary>使用指定的视图引擎列表来初始化 <see cref="T:System.Web.Mvc.ViewEngineCollection" /> 类的新实例。</summary>
      <param name="list">由新的集合包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的控制器上下文查找指定的分部视图。</summary>
      <returns>分部视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partialViewName" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>使用指定的控制器上下文和母版视图来查找指定的视图。</summary>
      <returns>视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="viewName">视图的名称。</param>
      <param name="masterName">母版视图的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewName" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.InsertItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>在集合中的指定索引处插入一个元素。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于集合中的项数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.SetItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于集合中的项数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineResult">
      <summary>表示定位视图引擎的结果。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用指定的搜索位置来初始化 <see cref="T:System.Web.Mvc.ViewEngineResult" /> 类的新实例。</summary>
      <param name="searchedLocations">搜索的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedLocations" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Web.Mvc.IView,System.Web.Mvc.IViewEngine)">
      <summary>使用指定的视图和视图引擎来初始化 <see cref="T:System.Web.Mvc.ViewEngineResult" /> 类的新实例。</summary>
      <param name="view">视图。</param>
      <param name="viewEngine">视图引擎。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view " /> 或 <paramref name="viewEngine" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.SearchedLocations">
      <summary>获取或设置搜索的位置。</summary>
      <returns>搜索的位置。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.View">
      <summary>获取或设置视图。</summary>
      <returns>视图。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.ViewEngine">
      <summary>获取或设置视图引擎。</summary>
      <returns>视图引擎。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngines">
      <summary>表示对应用程序可用的视图引擎的集合。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewEngines.Engines">
      <summary>获取视图引擎。</summary>
      <returns>视图引擎。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage">
      <summary>表示生成母版视图页所需的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewMasterPage" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Ajax">
      <summary>获取母版页的 AJAX 脚本。</summary>
      <returns>母版页的 AJAX 脚本。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Html">
      <summary>获取母版页的 HTML。</summary>
      <returns>母版页的 HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Model">
      <summary>获取模型。</summary>
      <returns>模型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.TempData">
      <summary>获取临时数据。</summary>
      <returns>临时数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Url">
      <summary>获取 URL。</summary>
      <returns>URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewContext">
      <summary>获取视图上下文。</summary>
      <returns>视图上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewData">
      <summary>获取视图数据。</summary>
      <returns>视图数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Writer">
      <summary>获取用于呈现母版页的编写器。</summary>
      <returns>用于呈现母版页的编写器。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage`1">
      <summary>表示生成强类型母版视图页所需的信息。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewMasterPage`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Ajax">
      <summary>获取母版页的 AJAX 脚本。</summary>
      <returns>母版页的 AJAX 脚本。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Html">
      <summary>获取母版页的 HTML。</summary>
      <returns>母版页的 HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Model">
      <summary>获取模型。</summary>
      <returns>对数据模型的引用。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.ViewData">
      <summary>获取视图数据。</summary>
      <returns>视图数据。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage">
      <summary>表示将视图呈现为 Web 窗体页所需的属性和方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewPage" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Ajax">
      <summary>获取或设置 <see cref="T:System.Web.Mvc.AjaxHelper" /> 对象，该对象用于在 Ajax 方案中呈现 HTML。</summary>
      <returns>与视图关联的 Ajax 帮助器对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Html">
      <summary>获取或设置 <see cref="T:System.Web.Mvc.HtmlHelper" /> 对象，该对象用于呈现 HTML 元素。</summary>
      <returns>与视图关联的 HTML 帮助器对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.InitHelpers">
      <summary>初始化 <see cref="P:System.Web.Mvc.ViewPage.Ajax" />、<see cref="P:System.Web.Mvc.ViewPage.Html" /> 和 <see cref="P:System.Web.Mvc.ViewPage.Url" /> 属性。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.MasterLocation">
      <summary>获取或设置母版视图的路径。</summary>
      <returns>母版视图的路径。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Model">
      <summary>获取关联的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象的 Model 属性。</summary>
      <returns>关联的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象的 Model 属性。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.OnPreInit(System.EventArgs)">
      <summary>在页初始化开始时引发 <see cref="E:System.Web.UI.Page.PreInit" /> 事件。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.ProcessRequest(System.Web.HttpContext)">
      <summary>通过 ASP.NET MVC 框架启用对指定 HTTP 请求的处理。</summary>
      <param name="context">一个对象，该对象封装有关当前 HTTP 请求的 HTTP 特定信息。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>初始化用于接收要呈现的页内容的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象。</summary>
      <param name="writer">用于接收页内容的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.RenderView(System.Web.Mvc.ViewContext)">
      <summary>使用指定的视图上下文将视图呈现给响应。</summary>
      <param name="viewContext">一个对象，它封装呈现视图所需的信息，其中包括控制器上下文、窗体上下文、临时数据和关联视图的视图数据。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetTextWriter(System.IO.TextWriter)">
      <summary>设置用于向响应呈现视图的文本编写器。</summary>
      <param name="textWriter">用于向响应呈现视图的编写器。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>设置关联视图的视图数据字典。</summary>
      <param name="viewData">要传递到视图的数据字典。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.TempData">
      <summary>获取要传递到视图的临时数据。</summary>
      <returns>要传递到视图的临时数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Url">
      <summary>获取或设置已呈现的页的 URL。</summary>
      <returns>已呈现的页的 URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewContext">
      <summary>获取或设置用于呈现视图的信息。</summary>
      <returns>用于呈现视图的信息，其中包括窗体上下文、临时数据和关联视图的视图数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewData">
      <summary>获取或设置一个字典，其中包含在控制器和视图之间传递的数据。</summary>
      <returns>一个字典，其中包含在控制器和视图之间传递的数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Writer">
      <summary>获取用于向响应呈现视图的文本编写器。</summary>
      <returns>用于向响应呈现视图的文本编写器。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage`1">
      <summary>表示以 Web 窗体页形式呈现强类型视图所需的信息。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewPage`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Ajax">
      <summary>获取或设置 <see cref="T:System.Web.Mvc.AjaxHelper`1" /> 对象，该对象支持在 Ajax 方案中呈现 HTML。</summary>
      <returns>与视图关联的 Ajax 帮助器对象。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Html">
      <summary>获取或设置为呈现元素提供支持的 <see cref="T:System.Web.Mvc.HtmlHelper" /> 对象。</summary>
      <returns>与视图关联的 HTML 帮助器对象。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.InitHelpers">
      <summary>实例化并初始化 <see cref="P:System.Web.Mvc.ViewPage`1.Ajax" /> 和 <see cref="P:System.Web.Mvc.ViewPage`1.Html" /> 属性。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Model">
      <summary>获取关联的 <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> 对象的 <see cref="P:System.Web.Mvc.ViewDataDictionary`1.Model" /> 属性。</summary>
      <returns>对数据模型的引用。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>设置关联视图的视图数据字典。</summary>
      <param name="viewData">要传递到视图的数据字典。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.ViewData">
      <summary>获取或设置一个字典，其中包含在控制器和视图之间传递的数据。</summary>
      <returns>一个字典，其中包含在控制器和视图之间传递的数据。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResult">
      <summary>表示一个类，该类用于使用由 <see cref="T:System.Web.Mvc.IViewEngine" /> 对象返回的 <see cref="T:System.Web.Mvc.IView" /> 实例来呈现视图。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewResult" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>搜索已注册的视图引擎并返回用于呈现视图的对象。</summary>
      <returns>用于呈现视图的对象。</returns>
      <param name="context">控制器上下文。</param>
      <exception cref="T:System.InvalidOperationException">方法搜索视图时发生错误。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewResult.MasterName">
      <summary>获取在呈现视图时要使用的母版视图（如母版页或模板）的名称。</summary>
      <returns>母版视图的名称。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResultBase">
      <summary>表示一个用于为视图提供模型并向响应呈现视图的基类。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewResultBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>在由操作调用程序调用时，向响应呈现视图。</summary>
      <param name="context">用于执行结果的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.FindView(System.Web.Mvc.ControllerContext)">
      <summary>返回用于呈现视图的 <see cref="T:System.Web.Mvc.ViewEngineResult" /> 对象。</summary>
      <returns>视图引擎。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.TempData">
      <summary>获取或设置此结果的 <see cref="T:System.Web.Mvc.TempDataDictionary" /> 对象。</summary>
      <returns>临时数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.View">
      <summary>获取或设置呈现给响应的 <see cref="T:System.Web.Mvc.IView" /> 对象。</summary>
      <returns>视图。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewData">
      <summary>获取或设置此结果的视图数据 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象。</summary>
      <returns>视图数据。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewEngineCollection">
      <summary>获取或设置与此结果关联的视图引擎的集合。</summary>
      <returns>视图引擎的集合。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewName">
      <summary>获取或设置要呈现的视图的名称。</summary>
      <returns>视图的名称。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl">
      <summary>提供 <see cref="T:System.Web.Mvc.TemplateInfo" /> 对象的容器。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewTemplateUserControl" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl`1">
      <summary>提供 <see cref="T:System.Web.Mvc.TemplateInfo" /> 对象的容器。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewTemplateUserControl`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewTemplateUserControl`1.FormattedModelValue">
      <summary>获取带格式的值。</summary>
      <returns>带格式的值。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewType">
      <summary>表示视图的类型。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewType.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewType" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewType.TypeName">
      <summary>获取或设置类型的名称。</summary>
      <returns>类型名称。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl">
      <summary>表示生成用户控件所需的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewUserControl" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Ajax">
      <summary>获取视图的 AJAX 脚本。</summary>
      <returns>视图的 AJAX 脚本。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.EnsureViewData">
      <summary>确保当存在视图数据时，将其添加到用户控件的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Html">
      <summary>获取视图的 HTML。</summary>
      <returns>视图的 HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Model">
      <summary>获取模型。</summary>
      <returns>模型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.RenderView(System.Web.Mvc.ViewContext)">
      <summary>使用指定的视图上下文呈现视图。</summary>
      <param name="viewContext">视图上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetTextWriter(System.IO.TextWriter)">
      <summary>设置用于向响应呈现视图的文本编写器。</summary>
      <param name="textWriter">用于向响应呈现视图的编写器。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>使用指定的视图数据来设置视图数据字典。</summary>
      <param name="viewData">视图数据。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.TempData">
      <summary>获取临时数据字典。</summary>
      <returns>临时数据字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Url">
      <summary>获取视图的 URL。</summary>
      <returns>视图的 URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewContext">
      <summary>获取或设置视图上下文。</summary>
      <returns>视图上下文。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewData">
      <summary>获取或设置视图数据字典。</summary>
      <returns>视图数据字典。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewDataKey">
      <summary>获取或设置视图数据键。</summary>
      <returns>视图数据键。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Writer">
      <summary>获取用于向响应呈现视图的编写器。</summary>
      <returns>用于向响应呈现视图的编写器。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl`1">
      <summary>表示生成强类型用户控件所需的信息。</summary>
      <typeparam name="TModel">模型的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.ViewUserControl`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Ajax">
      <summary>获取视图的 AJAX 脚本。</summary>
      <returns>视图的 AJAX 脚本。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Html">
      <summary>获取视图的 HTML。</summary>
      <returns>视图的 HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Model">
      <summary>获取模型。</summary>
      <returns>对数据模型的引用。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>设置视图的视图数据。</summary>
      <param name="viewData">视图数据。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.ViewData">
      <summary>获取或设置视图数据。</summary>
      <returns>视图数据。</returns>
    </member>
    <member name="T:System.Web.Mvc.VirtualPathProviderViewEngine">
      <summary>表示 <see cref="T:System.Web.Mvc.IViewEngine" /> 接口的抽象基类实现。</summary>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.VirtualPathProviderViewEngine" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaMasterLocationFormats">
      <summary>获取或设置支持区域的主位置格式。</summary>
      <returns>支持区域的主位置格式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaPartialViewLocationFormats">
      <summary>获取或设置支持区域的分部视图位置格式。</summary>
      <returns>支持区域的分部视图位置格式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaViewLocationFormats">
      <summary>获取或设置支持区域的视图位置格式。</summary>
      <returns>支持区域的视图位置格式。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的控制器上下文来创建指定的分部视图。</summary>
      <returns>对分部视图的引用。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="partialPath">新分部视图的分部路径。</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>使用控制器上下文、视图的路径和母版视图的路径来创建指定视图。</summary>
      <returns>对视图的引用。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="viewPath">视图的路径。</param>
      <param name="masterPath">母版视图的路径。</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>返回一个值，该值使用指定的控制器上下文来指示文件是否位于指定的路径中。</summary>
      <returns>如果文件位于指定的路径中，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="virtualPath">虚拟路径。</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>使用指定的控制器上下文查找指定的分部视图。</summary>
      <returns>分部视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="useCache">若为 true，则使用缓存的分部视图。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partialViewName" /> 参数为 null 或空。</exception>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>使用指定的控制器上下文和母版视图名称来查找指定的视图。</summary>
      <returns>页视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="viewName">视图的名称。</param>
      <param name="masterName">母版视图的名称。</param>
      <param name="useCache">若为 true，则使用缓存的视图。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewName" /> 参数为 null 或空。</exception>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.MasterLocationFormats">
      <summary>获取或设置主位置格式。</summary>
      <returns>主位置格式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.PartialViewLocationFormats">
      <summary>获取或设置分部视图位置格式。</summary>
      <returns>分部视图位置格式。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>使用指定的控制器上下文来释放指定的视图。</summary>
      <param name="controllerContext">控制器上下文。</param>
      <param name="view">要释放的视图。</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationCache">
      <summary>获取或设置视图位置缓存。</summary>
      <returns>视图位置缓存。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationFormats">
      <summary>获取或设置视图位置格式。</summary>
      <returns>视图位置格式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.VirtualPathProvider">
      <summary>获取或设置虚拟路径提供程序。</summary>
      <returns>虚拟路径提供程序。</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormView">
      <summary>表示在 MVC 中生成 Web 窗体页时所需的信息。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.String)">
      <summary>使用视图的指定路径来初始化 <see cref="T:System.Web.Mvc.WebFormView" /> 类的新实例。</summary>
      <param name="viewPath">视图路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewPath" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.String,System.String)">
      <summary>使用视图和母版视图的指定路径来初始化 <see cref="T:System.Web.Mvc.WebFormView" /> 类的新实例。</summary>
      <param name="viewPath">视图路径。</param>
      <param name="masterPath">母版视图路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewPath" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.MasterPath">
      <summary>获取或设置母版视图路径。</summary>
      <returns>母版视图路径。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>使用用于向响应呈现视图的指定编写器来呈现指定的视图上下文。</summary>
      <param name="viewContext">视图上下文。</param>
      <param name="writer">用于向响应呈现视图的编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewContext" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">尝试呈现视图时发生错误。</exception>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.ViewPath">
      <summary>获取或设置视图路径。</summary>
      <returns>视图路径。</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormViewEngine">
      <summary>表示一个用于向响应呈现 Web 窗体页的视图引擎。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.WebFormViewEngine" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的控制器上下文来创建指定的分部视图。</summary>
      <returns>分部视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="partialPath">分部路径。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>使用指定的控制器上下文、视图的路径和母版视图的路径来创建指定视图。</summary>
      <returns>视图。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="viewPath">视图路径。</param>
      <param name="masterPath">母版-视图路径。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>确定指定位置上是否存在用于指定的控制器上下文的文件。</summary>
      <returns>如果文件存在，则为 true；否则为 false。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="virtualPath">虚拟路径。</param>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxExtensions">
      <summary>表示支持 ASP.NET MVC 应用程序中的 ASP.NET AJAX。</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，其中包含指定操作方法的 URL；单击此操作链接时，将使用 JavaScript 异步调用此操作方法。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="actionName">将处理请求的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>使用指定的路由信息，将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>使用指定的路由信息，将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>使用指定的路由信息，将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>使用指定的路由信息，将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的路由信息，将 &lt;form&gt; 开始标记写入响应。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper)">
      <summary>返回一个 HTML script 元素，其中包含对定义区域性信息的全球化脚本的引用。</summary>
      <returns>script 元素，其 src 特性设置为全球化脚本，如下例所示：&lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">此方法扩展的 AJAX 帮助器对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper,System.Globalization.CultureInfo)">
      <summary>返回一个 HTML script 元素，其中包含对定义指定区域性信息的全球化脚本的引用。</summary>
      <returns>HTML 脚本 element，其 src 特性设置为全球化脚本，如下例所示：&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">此方法扩展的 AJAX 帮助器对象。</param>
      <param name="cultureInfo">封装有关目标区域性的信息，如日期格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureInfo" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回一个定位点元素，该元素包含指定路由值的虚拟路径；单击该链接时，将使用 JavaScript 异步向该虚拟路径发出请求。</summary>
      <returns>定位元素。</returns>
      <param name="ajaxHelper">AJAX 帮助器。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="ajaxOptions">提供异步请求选项的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxOptions">
      <summary>表示用于在 MVC 应用程序中运行 AJAX 脚本的选项设置。</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Ajax.AjaxOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Confirm">
      <summary>获取或设置提交请求之前，显示在确认窗口中的消息。</summary>
      <returns>要在确认窗口中显示的消息。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.HttpMethod">
      <summary>获取或设置 HTTP 请求方法（“Get”或“Post”）。</summary>
      <returns>HTTP 请求方法。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.InsertionMode">
      <summary>获取或设置指定如何将响应插入目标 DOM 元素的模式。</summary>
      <returns>插入模式（“InsertAfter”、“InsertBefore”或“Replace”）。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementId">
      <summary>获取或设置加载 AJAX 函数时，要显示的 HTML 元素的 id 特性。</summary>
      <returns>加载 AJAX 函数时显示的元素 ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnBegin">
      <summary>获取或设置更新页面之前，恰好调用的 JavaScript 函数的名称。</summary>
      <returns>更新页面之前，要调用的 JavaScript 函数的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnComplete">
      <summary>获取或设置实例化响应数据之后但更新页面之前，要调用的 JavaScript 函数。</summary>
      <returns>已实例化响应数据时，要调用的 JavaScript 函数。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnFailure">
      <summary>获取或设置页面更新失败时，要调用的 JavaScript 函数。</summary>
      <returns>页面更新失败时，要调用的 JavaScript 函数。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnSuccess">
      <summary>获取或设置成功更新页面之后，要调用的 JavaScript 函数。</summary>
      <returns>成功更新页面之后，要调用的 JavaScript 函数。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.UpdateTargetId">
      <summary>获取或设置要使用服务器响应来更新的 DOM 元素的 ID。</summary>
      <returns>要更新的 DOM 元素的 ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Url">
      <summary>获取或设置要向其发送请求的 URL。</summary>
      <returns>要向其发送请求的 URL。</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.InsertionMode">
      <summary>枚举 AJAX 脚本插入模式。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.Replace">
      <summary>替换元素。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertBefore">
      <summary>在元素前面插入。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertAfter">
      <summary>在元素后面插入。</summary>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncActionDescriptor">
      <summary>提供有关异步操作方法的信息，如方法的名称、控制器、参数、特性和筛选器。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.AsyncActionDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>使用指定的参数和控制器上下文来调用异步操作方法。</summary>
      <returns>一个包含异步调用结果的对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameters">操作方法的参数。</param>
      <param name="callback">回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>返回异步操作的结果。</summary>
      <returns>异步操作的结果。</returns>
      <param name="asyncResult">一个表示异步操作状态的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的参数和控制器上下文来执行异步操作方法。</summary>
      <returns>执行异步操作方法的结果。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameters">操作方法的参数。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncControllerActionInvoker">
      <summary>表示一个类，该类负责调用异步控制器的操作方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.AsyncControllerActionInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>使用指定控制器上下文、操作名称、回调方法和状态来调用异步操作方法。</summary>
      <returns>一个包含异步操作结果的对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
      <param name="callback">回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>使用指定控制器上下文、操作描述符、参数、回调方法和状态来调用异步操作方法。</summary>
      <returns>一个包含异步操作结果的对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="parameters">异步操作方法的参数。</param>
      <param name="callback">回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>使用指定控制器上下文、筛选器、操作描述符、参数、回调方法和状态来调用异步操作方法。</summary>
      <returns>一个包含异步操作结果的对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="filters">筛选器。</param>
      <param name="actionDescriptor">操作描述符。</param>
      <param name="parameters">异步操作方法的参数。</param>
      <param name="callback">回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>取消操作。</summary>
      <returns>如果操作已取消，则为 true；否则为 false。</returns>
      <param name="asyncResult">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(System.IAsyncResult)">
      <summary>取消操作。</summary>
      <returns>如果操作已取消，则为 true；否则为 false。</returns>
      <param name="asyncResult">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(System.IAsyncResult)">
      <summary>取消操作。</summary>
      <returns>如果操作已取消，则为 true；否则为 false。</returns>
      <param name="asyncResult">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>返回控制器描述符。</summary>
      <returns>控制器描述符。</returns>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncException"></member>
    <member name="M:System.Web.Mvc.Async.AsyncException.#ctor"></member>
    <member name="M:System.Web.Mvc.Async.AsyncException.#ctor(System.String)"></member>
    <member name="M:System.Web.Mvc.Async.AsyncException.#ctor(System.String,System.Exception)"></member>
    <member name="T:System.Web.Mvc.Async.AsyncManager">
      <summary>为 <see cref="T:System.Web.Mvc.AsyncController" /> 类提供异步操作。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.AsyncManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor(System.Threading.SynchronizationContext)">
      <summary>使用同步上下文初始化 <see cref="T:System.Web.Mvc.Async.AsyncManager" /> 类的新实例。</summary>
      <param name="syncContext">同步上下文。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Finish">
      <summary>通知 ASP.NET 所有异步操作都已完成。</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.AsyncManager.Finished">
      <summary>当调用 <see cref="M:System.Web.Mvc.Async.AsyncManager.Finish" /> 方法时发生。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.OutstandingOperations">
      <summary>获取未完成操作的数目。</summary>
      <returns>未完成操作的数目。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Parameters">
      <summary>获取已传递到异步完成方法的参数。</summary>
      <returns>已传递到异步完成方法的参数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Sync(System.Action)">
      <summary>在当前同步上下文中执行回调。</summary>
      <param name="action">异步操作。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Timeout">
      <summary>获取或设置异步超时值（以毫秒为单位）。</summary>
      <returns>异步超时值（以毫秒为单位）。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvoker">
      <summary>定义操作调用程序的接口，该调用程序用于调用一个异步操作以响应 HTTP 请求。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>调用指定操作。</summary>
      <returns>异步结果的状态。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">异步操作的名称。</param>
      <param name="callback">回调方法。</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>取消异步操作。</summary>
      <returns>如果可以取消异步方法，则为 true；否则为 false。</returns>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncController">
      <summary>定义异步控制器所需的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>执行指定的请求上下文。</summary>
      <returns>异步操作的状态。</returns>
      <param name="requestContext">请求上下文。</param>
      <param name="callback">异步回调方法。</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.EndExecute(System.IAsyncResult)">
      <summary>结束异步操作。</summary>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncManagerContainer">
      <summary>为异步管理器对象提供容器。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.IAsyncManagerContainer.AsyncManager">
      <summary>获取异步管理器对象。</summary>
      <returns>异步管理器对象。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.OperationCounter">
      <summary>提供一个容器，该容器维护挂起的异步操作的计数。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.#ctor">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.OperationCounter" /> 类的新实例。</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.OperationCounter.Completed">
      <summary>在异步方法完成时发生。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.OperationCounter.Count">
      <summary>获取操作计数。</summary>
      <returns>操作计数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement">
      <summary>将操作计数减 1。</summary>
      <returns>更新的操作计数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement(System.Int32)">
      <summary>将操作计数减去指定值。</summary>
      <returns>更新的操作计数。</returns>
      <param name="value">要从计数中减去的操作数。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment">
      <summary>将操作计数加一。</summary>
      <returns>更新的操作计数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment(System.Int32)">
      <summary>将操作计数增加指定值。</summary>
      <returns>更新的操作计数。</returns>
      <param name="value">要对计数增加的操作数。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor">
      <summary>提供有关异步操作方法的信息，如方法的名称、控制器、参数、特性和筛选器。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor" /> 类的新实例。</summary>
      <param name="asyncMethodInfo">一个对象，包含有关用于启动异步操作的方法（名称以“Asynch”结尾的方法）的信息。</param>
      <param name="completedMethodInfo">一个对象，包含有关完成方法（名称以“Completed”结尾的方法）的信息。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerDescriptor">控制器描述符。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ActionName">
      <summary>获取操作方法的名称。</summary>
      <returns>操作方法的名称。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.AsyncMethodInfo">
      <summary>获取异步操作方法的方法信息。</summary>
      <returns>异步操作方法的方法信息。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>使用指定参数和控制器上下文开始运行异步操作方法。</summary>
      <returns>一个包含异步调用结果的对象。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="parameters">操作方法的参数。</param>
      <param name="callback">回调方法。</param>
      <param name="state">包含回调方法要使用的信息的对象。此参数可以为 null。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.CompletedMethodInfo">
      <summary>获取异步完成方法的方法信息。</summary>
      <returns>异步完成方法的方法信息。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ControllerDescriptor">
      <summary>获取异步操作方法的控制器描述符。</summary>
      <returns>异步操作方法的控制器描述符。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>返回异步操作的结果。</summary>
      <returns>异步操作的结果。</returns>
      <param name="asyncResult">一个表示异步操作状态的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的自定义特性的数组（按类型标识）。</summary>
      <returns>一个自定义特性数组；如果不存在指定类型的自定义特性，则为一个空数组。</returns>
      <param name="attributeType">要返回的自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetFilters">
      <summary>返回与操作方法关联的筛选器。</summary>
      <returns>与操作方法关联的筛选器。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetParameters">
      <summary>返回操作方法的参数。</summary>
      <returns>操作方法的参数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetSelectors">
      <summary>返回操作方法选择器。</summary>
      <returns>操作方法选择器。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>确定是否为操作成员定义指定特性类型的一个或多个实例。</summary>
      <returns>如果为此成员定义了由 <paramref name="attributeType" /> 表示的类型特性，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor">
      <summary>封装描述异步控制器的信息，如控制器的名称、类型和操作。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor" /> 类的新实例。</summary>
      <param name="controllerType">控制器的类型。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.ControllerType">
      <summary>获取控制器的类型。</summary>
      <returns>控制器的类型。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>使用指定的名称和控制器上下文来查找操作方法。</summary>
      <returns>有关操作方法的信息。</returns>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCanonicalActions">
      <summary>返回控制器中的操作方法描述符的列表。</summary>
      <returns>控制器中的操作方法描述符的列表。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>返回为此成员定义的自定义特性，指定的特性除外。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回为此成员定义的指定类型的自定义特性（指定的特性除外）。</summary>
      <returns>自定义特性的数组，如果没有自定义特性，则为空数组。</returns>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>返回一个值，该值指示是否为此成员定义指定的自定义特性的一个或多个实例。</summary>
      <returns>如果为此成员定义了由 <paramref name="attributeType" /> 表示的类型特性，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义特性的类型。</param>
      <param name="inherit">要查找继承的自定义特性的层次结构链，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.ChildActionExtensions">
      <summary>表示对调用子操作方法并在父视图中以内联方式呈现结果的支持。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>调用指定子操作方法并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>使用指定参数调用指定子操作方法并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用指定控制器名称调用指定子操作方法，并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>使用指定参数和控制器名称调用指定子操作方法，并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定参数和控制器名称调用指定子操作方法，并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的字典。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定参数调用指定子操作方法并以 HTML 字符串形式返回结果。</summary>
      <returns>HTML 字符串形式的子操作结果。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的字典。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>调用指定子操作方法并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>使用指定参数调用指定子操作方法，并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用指定控制器名称调用指定子操作方法，并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>使用指定参数和控制器名称调用指定子操作方法，并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定参数和控制器名称调用指定子操作方法，并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <param name="controllerName">包含操作方法的控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的字典。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>使用指定参数调用指定子操作方法，并在父视图中以内联方式呈现结果。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="actionName">要调用的子操作方法的名称。</param>
      <param name="routeValues">一个包含路由参数的字典。可使用 <paramref name="routeValues" /> 提供绑定到操作方法参数的参数。<paramref name="routeValues" /> 参数将与原始路由值合并，并重写这些值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">找不到所需的虚拟路径数据。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayExtensions">
      <summary>表示支持以 HTML 形式呈现对象值。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>返回由表达式表示的对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用指定模板返回一个由表达式表示的对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>使用模板和 HTML 字段 ID 返回一个由表达式表示的对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>返回由 <see cref="T:System.Linq.Expressions.Expression" /> 表达式表示的对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>使用指定模板返回一个字符串，该字符串包含由 <see cref="T:System.Linq.Expressions.Expression" /> 表示的对象中的每个属性值。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>使用模板和 HTML 字段 ID 返回一个由 <see cref="T:System.Linq.Expressions.Expression" /> 表示的对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper)">
      <summary>返回模型中的每个属性所对应的 HTML 标记。</summary>
      <returns>模型中的每个属性所对应的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>使用指定模板返回模型中每个属性所对应的 HTML 标记。</summary>
      <returns>模型中的每个属性所对应的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用指定模板和 HTML 字段 ID 返回模型中每个属性所对应的 HTML 标记。</summary>
      <returns>模型中的每个属性所对应的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="templateName">用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayTextExtensions">
      <summary>提供以 HTML 形式呈现对象值的方法。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayText(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>返回指定表达式所表示对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">一个表达式，标识包含要显示的属性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>返回指定表达式所表示对象中的每个属性所对应的 HTML 标记。</summary>
      <returns>由表达式表示的对象中的每个属性的 HTML 标记。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TResult">值的类型。</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.EditorExtensions">
      <summary>表示在应用程序中支持 HTML input 元素。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>返回一个由表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用指定模板返回一个由表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>使用指定模板和 HTML 字段名返回一个由表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>返回一个由 <see cref="T:System.Linq.Expressions.Expression" /> 表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>使用指定模板返回一个由 <see cref="T:System.Linq.Expressions.Expression" /> 表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>使用指定模板和 HTML 字段名返回一个由 <see cref="T:System.Linq.Expressions.Expression" /> 表达式表示的对象中的每个属性所对应的 HTML input 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要显示的属性的对象。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper)">
      <summary>返回模型中的每个属性所对应的 HTML input 元素。</summary>
      <returns>模型中的每个属性所对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>使用指定模板返回模型中每个属性所对应的 HTML input 元素。</summary>
      <returns>模型和指定模板中的每个属性所对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>使用模板名称和 HTML 字段名返回模型中的每个属性所对应的 HTML input 元素。</summary>
      <returns>模型和指定模板中的每个属性所对应的 HTML input 元素。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="templateName">要用于呈现对象的模板的名称。</param>
      <param name="htmlFieldName">一个字符串，可用于消除为具有相同名称的各个属性呈现的 HTML input 元素名称之间的歧义。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.FormExtensions">
      <summary>表示在应用程序中支持 HTML。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="actionName">操作方法的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由某个操作方法处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。此对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeName">用于获取窗体发布 URL 的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象</param>
      <param name="method">用于处理窗体的 HTTP 方法（GET 或 POST）。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>将 &lt;form&gt; 开始标记写入响应。在用户提交窗体时，将由路由目标处理该请求。</summary>
      <returns>一个开始 &lt;form&gt; 标记。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="routeValues">一个包含路由参数的对象</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.EndForm(System.Web.Mvc.HtmlHelper)">
      <summary>将 &lt;/form&gt; 结束标记呈现到响应中。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.InputExtensions">
      <summary>表示在应用程序中支持 HTML 输入控件。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称，以及一个指示是否已选中复选框的值，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
      <param name="isChecked">如果选择复选框，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、一个指示是否已选中复选框的值以及 HTML 特性，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
      <param name="isChecked">如果选择复选框，则为 true；否则为 false。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、一个指示是否已选中复选框的值以及 HTML 特性，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
      <param name="isChecked">如果选择复选框，则为 true；否则为 false。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和 HTML 特性，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和 HTML 特性，返回复选框 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>为指定表达式表示的对象中的每个属性返回对应的复选框 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对指定表达式表示的对象中的每个属性均设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的复选框 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的复选框 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“checkbox”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回隐藏的 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和值，返回隐藏的 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">隐藏的 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回隐藏的 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">隐藏的 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回隐藏的 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">隐藏的 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>为由指定表达式表示的对象中的每个属性返回对应的 HTML 隐藏 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML 隐藏 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML 隐藏 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“hidden”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回密码 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和值，返回密码 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">密码 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回密码 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">密码 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回密码 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">密码 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>为指定表达式表示的对象中的每个属性返回对应的密码 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对指定表达式表示的对象中的每个属性均设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的密码 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的密码 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“password”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="isChecked">如果要选择单选按钮，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="isChecked">如果要选择单选按钮，则为 true；否则为 false。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="isChecked">如果要选择单选按钮，则为 true；否则为 false。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>返回用于呈现互斥选项的单选按钮 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>为指定表达式表示的对象中的每个属性返回对应的单选按钮 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对指定表达式表示的对象中的每个属性均设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的单选按钮 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的单选按钮 input 元素。</summary>
      <returns>一个 HTML input 元素，使用指定的 HTML 特性将其 type 特性针对指定表达式表示的对象中的每个属性均设置为“radio”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="value">如果选择此单选按钮，则为在发送窗体时提交的此单选按钮的值。如果 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 或 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中选定的单选按钮的值与此值匹配，则选择此单选按钮。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回文本 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和值，返回文本 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">文本 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回文本 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">文本 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、值和 HTML 特性，返回文本 input 元素。</summary>
      <returns>一个 input 元素，其 type 特性设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">窗体字段的名称和用于查找值的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 键。</param>
      <param name="value">文本 input 元素的值。如果此值为 null，则从 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象检索该元素的值。如果该对象中不存在任何值，则从 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象检索该值。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>为由指定表达式表示的对象中的每个属性返回对应的文本 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的文本 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的文本 input 元素。</summary>
      <returns>一个 HTML input 元素，其 type 特性针对表达式表示的对象中的每个属性均设置为“text”。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 参数为 null 或为空。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.LabelExtensions">
      <summary>表示在 ASP.NET MVC 视图中支持 HTML label 元素。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>返回一个 HTML label 元素和由指定表达式表示的属性的属性名称。</summary>
      <returns>一个 HTML label 元素和由表达式表示的属性的属性名称。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识要显示的属性。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>返回一个 HTML label 元素和由指定表达式表示的属性的属性名称。</summary>
      <returns>一个 HTML label 元素和由表达式表示的属性的属性名称。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识要显示的属性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper)">
      <summary>返回一个 HTML label 元素和由模型表示的属性的属性名称。</summary>
      <returns>一个 HTML label 元素和由模型表示的属性的属性名称。</returns>
      <param name="html">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.LinkExtensions">
      <summary>表示在应用程序中支持 HTML 链接。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。通过检查对象的属性，利用反射检索特性。该对象通常是使用对象初始值设定项语法创建的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="controllerName">控制器的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="actionName">操作的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。通过检查对象的属性，利用反射检索参数。该对象通常是使用对象初始值设定项语法创建的。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="protocol">URL 协议，如“http”或“https”。</param>
      <param name="hostName">URL 的主机名。</param>
      <param name="fragment">URL 片段名称（定位点名称）。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeName">用于返回虚拟路径的路由的名称。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回包含指定操作的虚拟路径的定位点元素（a 元素）。</summary>
      <returns>一个定位点元素（a 元素）。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="linkText">定位点元素的内部文本。</param>
      <param name="routeValues">一个包含路由参数的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> 参数为 null 或为空。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.MvcForm">
      <summary>表示 MVC 视图中的 HTML form 元素。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.HttpResponseBase)">
      <summary>使用指定的 HTTP 响应对象初始化 <see cref="T:System.Web.Mvc.Html.MvcForm" /> 类的新实例。</summary>
      <param name="httpResponse">HTTP 响应对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpResponse " /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.Mvc.ViewContext)">
      <summary>使用指定的视图上下文初始化 <see cref="T:System.Web.Mvc.Html.MvcForm" /> 类的新实例。</summary>
      <param name="viewContext">对呈现视图所需信息进行封装的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewContext" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose">
      <summary>释放由 <see cref="T:System.Web.Mvc.Html.MvcForm" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Web.Mvc.Html.MvcForm" /> 类的当前实例占用的非托管资源；如果需要，还可以释放托管资源。</summary>
      <param name="disposing">如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.EndForm">
      <summary>终止窗体并释放所有窗体资源。</summary>
    </member>
    <member name="T:System.Web.Mvc.Html.PartialExtensions">
      <summary>表示将分部视图呈现为 HTML 编码字符串的功能。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>以 HTML 编码字符串的形式呈现指定的分部视图。</summary>
      <returns>以 HTML 编码字符串形式呈现的分部视图。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="partialViewName">要呈现的分部视图的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>以 HTML 编码字符串的形式呈现指定的分部视图。</summary>
      <returns>以 HTML 编码字符串形式呈现的分部视图。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="partialViewName">要呈现的分部视图的名称。</param>
      <param name="model">用于分部视图的模型。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>以 HTML 编码字符串的形式呈现指定的分部视图。</summary>
      <returns>以 HTML 编码字符串形式呈现的分部视图。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="model">用于分部视图的模型。</param>
      <param name="viewData">用于分部视图的视图数据字典。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>以 HTML 编码字符串的形式呈现指定的分部视图。</summary>
      <returns>以 HTML 编码字符串形式呈现的分部视图。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="partialViewName">要呈现的分部视图的名称。</param>
      <param name="viewData">用于分部视图的视图数据字典。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.RenderPartialExtensions">
      <summary>提供对呈现分部视图的支持。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>使用指定的 HMTL 帮助器来呈现指定的分部视图。</summary>
      <param name="htmlHelper">HTML 帮助器。</param>
      <param name="partialViewName">分部视图的名称</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>呈现指定的分部视图，并向其传递当前 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象的副本，但应将 Model 属性设置为指定的模型。</summary>
      <param name="htmlHelper">HTML 帮助器。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>呈现指定的分部视图，使用指定的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象替换分部视图的 ViewData 属性，并将视图数据的 Model 属性设置为指定的模型。</summary>
      <param name="htmlHelper">HTML 帮助器。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="model">用于分部视图的模型。</param>
      <param name="viewData">分部视图的视图数据。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>呈现指定的分部视图，并使用指定的 <see cref="T:System.Web.Mvc.ViewDataDictionary" /> 对象替换其 ViewData 属性。</summary>
      <param name="htmlHelper">HTML 帮助器。</param>
      <param name="partialViewName">分部视图的名称。</param>
      <param name="viewData">视图数据。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.SelectExtensions">
      <summary>表示支持在列表中进行选择。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和指定列表项，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定列表项和指定的 HTML 特性，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定列表项和指定的 HTML 特性，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定列表项和选项标签，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定列表项、选项标签和指定的 HTML 特性，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定列表项、选项标签和指定的 HTML 特性，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和选项标签，返回单选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>使用指定列表项，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定列表项和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>使用指定列表项和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>使用指定列表项和选项标签，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定列表项、选项标签和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>使用指定列表项、选项标签和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="optionLabel">默认空项的文本。此参数可以为 null。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回多选 select 元素。</summary>
      <returns>一个 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和指定列表项，返回多选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、指定的列表项和指定的 HTML 特性，返回多选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和指定列表项，返回多选 select 元素。</summary>
      <returns>一个 HTML select 元素，对于列表中的每个项目，该元素都包含一个对应的 option 子元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="selectList">一个用于填充下拉列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null 或为空。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>使用指定列表项，返回指定表达式所表示对象中每个属性对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定列表项和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>使用指定列表项和 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML select 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML select 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="selectList">一个用于填充列表的 <see cref="T:System.Web.Mvc.SelectListItem" /> 对象的集合。</param>
      <param name="htmlAttributes">一个对象，其中包含要为该元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.TextAreaExtensions">
      <summary>表示支持 HTML textarea 控件。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>通过使用指定的 HTML 帮助器和窗体字段的名称，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和指定的 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器和 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称和文本内容，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="value">文本内容。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、文本内容和指定的 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="value">文本内容。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、文本内容、行数和列数以及指定的 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="value">文本内容。</param>
      <param name="rows">行数。</param>
      <param name="columns">列数。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、文本内容、行数和列数以及指定的 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="value">文本内容。</param>
      <param name="rows">行数。</param>
      <param name="columns">列数。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>通过使用指定的 HTML 帮助器、窗体字段的名称、文本内容和指定的 HTML 特性，返回指定的 textarea 元素。</summary>
      <returns>textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="name">要返回的窗体字段的名称。</param>
      <param name="value">文本内容。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>为由指定表达式表示的对象中的每个属性返回对应的 HTML textarea 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML textarea 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定 HTML 特性以及行数和列数，为由指定表达式表示的对象中的每个属性返回对应的 HTML textarea 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="rows">行数。</param>
      <param name="columns">列数。</param>
      <param name="htmlAttributes">一个包含要为该元素设置的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
      <summary>使用指定 HTML 特性以及行数和列数，为由指定表达式表示的对象中的每个属性返回对应的 HTML textarea 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="rows">行数。</param>
      <param name="columns">列数。</param>
      <param name="htmlAttributes">一个对象，包含要为元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>使用指定 HTML 特性，为由指定表达式表示的对象中的每个属性返回对应的 HTML textarea 元素。</summary>
      <returns>由表达式表示的对象中的每个属性对应的 HTML textarea 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助器实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="htmlAttributes">一个对象，包含要为元素设置的 HTML 特性。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.ValidationExtensions">
      <summary>提供对验证 HTML 窗体中的输入的支持。</summary>
    </member>
    <member name="P:System.Web.Mvc.Html.ValidationExtensions.ResourceClassKey">
      <summary>获取或设置包含本地化字符串值的资源文件的名称（类键）。</summary>
      <returns>资源文件的名称（类键）。</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.Validate(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>检索指定模型的验证元数据，并将每个规则应用于数据字段。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>检索验证元数据并验证由指定表达式表示的每个数据字段。</summary>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>在 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的指定字段出错时显示一条验证消息。</summary>
      <returns>如果该属性或对象有效，则为一个空字符串；否则为一个包含错误消息的 span 元素。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="modelName">所验证的属性或模型对象的名称。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>为由指定表达式表示的每个数据字段的验证错误消息返回对应的 HTML 标记。</summary>
      <returns>由表达式表示的每个数据字段的验证错误消息所对应的 HTML 标记。如果没有发生任何验证错误或禁用客户端验证，此方法将返回 null。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>使用指定消息，为由指定表达式表示的每个数据字段的验证错误消息返回对应的 HTML 标记。</summary>
      <returns>由表达式表示的每个数据字段的验证错误消息所对应的 HTML 标记。如果没有发生任何验证错误或禁用客户端验证，此方法将返回 null。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定消息和 HTML 特性，为由指定表达式表示的每个数据字段的验证错误消息返回对应的 HTML 标记。</summary>
      <returns>由表达式表示的每个数据字段的验证错误消息所对应的 HTML 标记。如果没有发生任何验证错误或禁用客户端验证，此方法将返回 null。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">一个包含元素的 HTML 特性的字典。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>使用指定消息和 HTML 特性，为由指定表达式表示的每个数据字段的验证错误消息返回对应的 HTML 标记。</summary>
      <returns>由表达式表示的每个数据字段的验证错误消息所对应的 HTML 标记。如果没有发生任何验证错误或禁用客户端验证，此方法将返回 null。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="expression">一个表达式，标识包含要呈现的属性的对象。</param>
      <param name="validationMessage">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
      <typeparam name="TModel">模型的类型。</typeparam>
      <typeparam name="TProperty">值的类型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的验证消息的未排序列表（ul 元素）。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中验证消息的未排序列表（ul 元素），还可以选择仅显示模型级错误。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="excludePropertyErrors">true 表示使摘要仅显示模型级别的错误；false 表示使摘要显示所有错误。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中验证消息的未排序列表（ul 元素），还可以选择仅显示模型级错误。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="excludePropertyErrors">true 表示使摘要仅显示模型级别的错误；false 表示使摘要显示所有错误。</param>
      <param name="message">与验证摘要一起显示的消息。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中验证消息的未排序列表（ul 元素），还可以选择仅显示模型级错误。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="excludePropertyErrors">true 表示使摘要仅显示模型级别的错误；false 表示使摘要显示所有错误。</param>
      <param name="message">与验证摘要一起显示的消息。</param>
      <param name="htmlAttributes">一个包含元素的 HTML 特性的字典。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中验证消息的未排序列表（ul 元素），还可以选择仅显示模型级错误。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="excludePropertyErrors">true 表示使摘要仅显示模型级别的错误；false 表示使摘要显示所有错误。</param>
      <param name="message">与验证摘要一起显示的消息。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的验证消息的未排序列表（ul 元素）。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HMTL 帮助程序实例。</param>
      <param name="message">要在指定字段包含错误时显示的消息。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的验证消息的未排序列表（ul 元素）。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="message">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">一个包含元素的 HTML 特性的字典。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>返回 <see cref="T:System.Web.Mvc.ModelStateDictionary" /> 对象中的验证消息的未排序列表（ul 元素）。</summary>
      <returns>包含验证消息的未排序列表（ul 元素）的字符串。</returns>
      <param name="htmlHelper">此方法扩展的 HTML 帮助程序实例。</param>
      <param name="message">要在指定字段包含错误时显示的消息。</param>
      <param name="htmlAttributes">包含元素 HTML 特性的对象。</param>
    </member>
  </members>
</doc>